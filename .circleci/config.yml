version: 2.1

parameters:
  # NOTE: Do not update the `geth_version` manually. It is updated during the
  # integration test fixture generation.
  geth_version:
    default: "1.15.11"
    type: string
  go_version:
    default: "1.24.1"
    type: string

common: &common
  parameters:
    python_exec:
      type: string
      default: "python"
  working_directory: ~/repo
  steps:
    - checkout
    - run:
        name: merge pull request base
        command: ./.circleci/merge_pr.sh
    - run:
        name: merge pull request base (2nd try)
        command: ./.circleci/merge_pr.sh
        when: on_fail
    - run:
        name: merge pull request base (3rd try)
        command: ./.circleci/merge_pr.sh
        when: on_fail
    - restore_cache:
        keys:
          - cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}
    - run:
        name: install pypy3 if python_exec is pypy3
        command: |
          if [ "<< parameters.python_exec >>" == "pypy3" ]; then
            sudo apt-get update

            # If .pyenv already exists, remove and reinstall to get latest version
            if [ -d "$HOME/.pyenv" ]; then
                echo "Removing existing .pyenv directory..."
                rm -rf $HOME/.pyenv
            fi
            curl https://pyenv.run | bash
            export PATH="$HOME/.pyenv/bin:$PATH"
            eval "$(pyenv init --path)"
            eval "$(pyenv init -)"
            eval "$(pyenv virtualenv-init -)"

            # Find the latest PyPy version matching the python minor version
            latest_pypy_version=$(pyenv install --list | grep -E "pypy3\.<< parameters.python_minor_version >>" | grep -v "\-src" | tail -1 | tr -d ' ')
            echo "Latest PyPy version: $latest_pypy_version"

            # Install the latest PyPy 3.10 version using pyenv if not already installed
            pyenv install "$latest_pypy_version"
            pyenv global "$latest_pypy_version"

            # Verify the correct PyPy version is being used
            pypy3 --version

            # Install pip using the newly installed PyPy version
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            pypy3 get-pip.py
          fi
    - run:
        name: install dependencies
        command: |
          python -m pip install --upgrade pip
          python -m pip install tox
          python web3/scripts/install_pre_releases.py
    - run:
        name: run tox
        command: << parameters.python_exec >> -m tox -r
    - save_cache:
        paths:
          - .hypothesis
          - .tox
          - ~/.cache/pip
          - ~/.local
        key: cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}
  resource_class: xlarge

geth_steps: &geth_steps
  working_directory: ~/repo
  resource_class: xlarge
  steps:
    - checkout
    - restore_cache:
        keys:
          - cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}
    - run:
        name: install dependencies
        command: |
          python -m pip install --upgrade pip
          python -m pip install tox
    - run:
        name: setup geth binary
        command: |
          if [ "<< pipeline.parameters.geth_version >>" != "custom" ]; then
            export GOROOT=/usr/local/go
            export GETH_BINARY="$HOME/.py-geth/geth-v<< pipeline.parameters.geth_version >>/bin/geth"
            echo "configured geth version: v<< pipeline.parameters.geth_version >>"
            if [ ! -e "$GETH_BINARY" ]; then
              echo "GETH_BINARY not set, installing geth..."
              curl -O https://storage.googleapis.com/golang/go<< pipeline.parameters.go_version >>.linux-amd64.tar.gz
              tar xvf go<< pipeline.parameters.go_version >>.linux-amd64.tar.gz
              sudo chown -R root:root ./go
              sudo mv go /usr/local
              sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
              sudo apt-get update
              sudo apt-get install -y build-essential
              pygeth_version=$(python web3/scripts/parse_pygeth_version.py)
              echo "installing py-geth$pygeth_version"
              pip install -U --user "py-geth$pygeth_version"
              python -m geth.install v<< pipeline.parameters.geth_version >>
            fi
            sudo ln -s /home/circleci/.py-geth/geth-v<< pipeline.parameters.geth_version >>/bin/geth /usr/local/bin/geth
          else
            export GOROOT=/usr/local/go
            export GETH_BINARY="./custom_geth"
            echo 'export GETH_BINARY="./custom_geth"' >> $BASH_ENV
            curl -O https://storage.googleapis.com/golang/go<< pipeline.parameters.go_version >>.linux-amd64.tar.gz
            tar xvf go<< pipeline.parameters.go_version >>.linux-amd64.tar.gz
            sudo chown -R root:root ./go
            sudo mv go /usr/local
            sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
            sudo apt-get update
            sudo apt-get install -y build-essential
          fi
          echo -e "GETH_BINARY=$GETH_BINARY"
          geth version
    - run:
        name: run tox
        command: python -m tox run -r
    - save_cache:
        paths:
          - .tox
          - ~/.cache/pip
          - ~/.local
          - ~/.py-geth
        key: cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}

orbs:
  win: circleci/windows@5.0.0

docs: &docs
  working_directory: ~/repo
  steps:
    - checkout
    - restore_cache:
        keys:
          - cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}
    - run:
        name: install dependencies
        command: |
          python -m pip install --upgrade pip
          python -m pip install tox
    - run:
        name: run tox
        command: python -m tox run -r
    - store_artifacts:
          path: /home/circleci/repo/docs/_build
    - save_cache:
        paths:
          - .tox
          - ~/.cache/pip
          - ~/.local
        key: cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}
  resource_class: xlarge

jobs:
  common:
    parameters:
      python_minor_version:
        type: string
      tox_env:
        type: string
      python_exec:
        type: string
        default: "python"
    <<: *common
    docker:
      - image: cimg/python:3.<< parameters.python_minor_version >>
    environment:
      TOXENV: py3<< parameters.python_minor_version >>-<< parameters.tox_env >>

  common-pypy:
    parameters:
      python_minor_version:
        type: string
      tox_env:
        type: string
      python_exec:
        type: string
        default: "pypy3"
    <<: *common
    docker:
      - image: cimg/python:3.<< parameters.python_minor_version >>
    environment:
      TOXENV: pypy3<< parameters.python_minor_version >>-<< parameters.tox_env >>

  geth:
    parameters:
      python_minor_version:
        type: string
      tox_env:
        type: string
    <<: *geth_steps
    docker:
      - image: cimg/python:3.<< parameters.python_minor_version >>
    environment:
      TOXENV: py3<< parameters.python_minor_version >>-<< parameters.tox_env >>

  docs:
    parameters:
      python_minor_version:
        type: string
    <<: *docs
    docker:
      - image: cimg/python:3.<< parameters.python_minor_version >>
    environment:
      TOXENV: docs

  windows-wheel:
    parameters:
      python_minor_version:
        type: string
    executor:
      name: win/default
      shell: bash.exe
    working_directory: C:\Users\circleci\project\web3.py
    environment:
      TOXENV: windows-wheel
    steps:
      - checkout
      - restore_cache:
          keys:
            - cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}
      - run:
          name: install pyenv
          command: |
            pip install pyenv-win --target $HOME/.pyenv
            echo 'export PYENV="$HOME/.pyenv/pyenv-win/"' >> $BASH_ENV
            echo 'export PYENV_ROOT="$HOME/.pyenv/pyenv-win/"' >> $BASH_ENV
            echo 'export PYENV_USERPROFILE="$HOME/.pyenv/pyenv-win/"' >> $BASH_ENV
            echo 'export PATH="$PATH:$HOME/.pyenv/pyenv-win/bin"' >> $BASH_ENV
            echo 'export PATH="$PATH:$HOME/.pyenv/pyenv-win/shims"' >> $BASH_ENV
            source $BASH_ENV
            pyenv update
      - run:
          name: install latest python version and tox
          command: |
            LATEST_VERSION=$(pyenv install --list | grep -E "^\s*3\.<< parameters.python_minor_version >>\.[0-9]+$" | tail -1 | tr -d ' ')
            echo "installing python version $LATEST_VERSION"
            pyenv install $LATEST_VERSION
            pyenv global $LATEST_VERSION
            python3 -m pip install --upgrade pip
            python3 -m pip install tox
      - run:
          name: run tox
          command: |
            echo 'running tox with' $(python3 --version)
            python3 -m tox run -r
      - save_cache:
          paths:
            - .tox
          key: cache-v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}

workflows:
  version: 2
  test:
    jobs: &all_jobs
      - common:
          matrix:
            parameters:
              python_minor_version: ["8", "9", "10", "11", "12", "13"]
              tox_env: [
                "lint",
                "core-pyevm",
                "core-pyevm_async",
                "ens-pyevm",
                "ensip15",
                "wheel"
              ]
          python_exec: "python"
          name: "py3<< matrix.python_minor_version >>-<< matrix.tox_env >>"
      - common:
          matrix:
            parameters:
              # eels only supports 3.10 and above
              python_minor_version: ["10", "11", "12", "13"]
              tox_env: [
                "core-eels",
                "core-eels_async",
                "ens-eels",
                "integration-ethtester-eels"
              ]
          python_exec: "python"
          name: "py3<< matrix.python_minor_version >>-<< matrix.tox_env >>"
      - common-pypy:
          matrix:
            parameters:
              # eels only supports 3.10 and above; pyenv only has pypy3.10 available
              python_minor_version: ["10"]
              tox_env: [
                "core-eels",
                "core-eels_async",
                "ens-eels",
                "integration-ethtester-eels",
                "core-pyevm",
                "core-pyevm_async",
                "ens-pyevm",
                "integration-ethtester-pyevm"
              ]
          python_exec: "pypy3"
          name: "pypy3<< matrix.python_minor_version >>-<< matrix.tox_env >>"
      - geth:
          matrix:
            parameters:
              python_minor_version: ["8", "9", "10", "11", "12", "13"]
              tox_env: [
                "integration-goethereum-ipc",
                "integration-goethereum-ipc_async",
                "integration-goethereum-http",
                "integration-goethereum-http_async",
                "integration-goethereum-legacy_ws",
                "integration-goethereum-ws",
                "integration-ethtester-pyevm"
              ]
          name: "py3<< matrix.python_minor_version >>-<< matrix.tox_env >>"
      - docs:
          matrix:
            parameters:
              python_minor_version: ["9"]
          name: "py3<< matrix.python_minor_version >>-docs"
      - windows-wheel:
          matrix:
            parameters:
              python_minor_version: ["10", "11", "12", "13"]
          name: "py3<< matrix.python_minor_version >>-windows-wheel"

  nightly:
    triggers:
      - schedule:
          # Weekdays 12:00p UTC
          cron: "0 12 * * 1,2,3,4,5"
          filters:
            branches:
              only:
                - v6
                - main
    jobs: *all_jobs
