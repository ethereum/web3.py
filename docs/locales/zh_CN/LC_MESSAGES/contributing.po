# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2025, The Ethereum Foundation
# This file is distributed under the same license as the web3.py package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: web3.py 7.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-06 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../contributing.rst:4
msgid "Contributing"
msgstr "贡献"

#: ../../contributing.rst:6
msgid ""
"Thanks for your interest in contributing to web3.py! Read on to learn "
"what would be helpful and how to go about it. If you get stuck along the "
"way, reach for help in the `Python Discord server`_."
msgstr ""

#: ../../contributing.rst:12
msgid "How to Help"
msgstr ""

#: ../../contributing.rst:14
msgid "Without code:"
msgstr ""

#: ../../contributing.rst:16
msgid ""
"Answer user questions within GitHub issues, Stack Overflow, or the "
"`Python Discord server`_."
msgstr ""

#: ../../contributing.rst:17
msgid "Write or record tutorial content."
msgstr ""

#: ../../contributing.rst:18
msgid "Improve our documentation (including typo fixes)."
msgstr ""

#: ../../contributing.rst:19
msgid ""
"`Open an issue <https://github.com/ethereum/web3.py/issues/new>`_ on "
"GitHub to document a bug. Include as much detail as possible, e.g., how "
"to reproduce the issue and any exception messages."
msgstr ""

#: ../../contributing.rst:21
msgid "With code:"
msgstr ""

#: ../../contributing.rst:23
msgid "Fix a bug that has been reported in an issue."
msgstr ""

#: ../../contributing.rst:24
msgid "Add a feature that has been documented in an issue."
msgstr ""

#: ../../contributing.rst:25
msgid "Add a missing test case."
msgstr ""

#: ../../contributing.rst:29
msgid ""
"**Before you start:** always ask if a change would be desirable or let us"
" know that you plan to work on something! We don't want to waste your "
"time on changes we can't accept or duplicated effort."
msgstr ""

#: ../../contributing.rst:35
msgid "Your Development Environment"
msgstr ""

#: ../../contributing.rst:39
msgid ""
"Use of a virtual environment is strongly advised for minimizing "
"dependency issues. See `this article <https://realpython.com/effective-"
"python-environment/#virtual-environments>`_ for usage patterns."
msgstr ""

#: ../../contributing.rst:43
msgid ""
"All pull requests are made from a fork of the repository; use the GitHub "
"UI to create a fork. web3.py depends on `submodules "
"<https://gist.github.com/gitaarik/8735255>`_, so when you clone your fork"
" to your local machine, include the ``--recursive`` flag:"
msgstr ""

#: ../../contributing.rst:53
msgid "Finally, install all development dependencies:"
msgstr ""

#: ../../contributing.rst:62
msgid "Using Docker"
msgstr ""

#: ../../contributing.rst:64
msgid ""
"Developing within Docker is not required, but if you prefer that "
"workflow, use the *sandbox* container provided in the **docker-"
"compose.yml** file."
msgstr ""

#: ../../contributing.rst:67
msgid "To start up the test environment, run:"
msgstr ""

#: ../../contributing.rst:74
msgid ""
"This will build a Docker container set up with an environment to run the "
"Python test code."
msgstr ""

#: ../../contributing.rst:77
msgid "To run the core tests from your local machine:"
msgstr ""

#: ../../contributing.rst:84
msgid ""
"The container does not have ``go-ethereum`` installed, so you can exclude"
" those tests by using the ``-k \"not goethereum\"`` flag."
msgstr ""

#: ../../contributing.rst:92
msgid ""
"You can run arbitrary commands inside the Docker container by using the "
"``bash -c`` prefix."
msgstr ""

#: ../../contributing.rst:100
msgid "Or, if you would like to open a session to the container, run:"
msgstr ""

#: ../../contributing.rst:108
msgid "Running The Tests"
msgstr ""

#: ../../contributing.rst:110
msgid "A great way to explore the code base is to run the tests."
msgstr ""

#: ../../contributing.rst:113
msgid "First, install the test dependencies:"
msgstr ""

#: ../../contributing.rst:120
msgid "You can run all tests with:"
msgstr ""

#: ../../contributing.rst:127
msgid ""
"However, running the entire test suite takes a very long time and is "
"generally impractical. Typically, you'll just want to run a subset "
"instead, like:"
msgstr ""

#: ../../contributing.rst:135
msgid ""
"Linting is also performed by the CI and locally with each commit. You can"
" save yourself some time by checking for linting errors manually:"
msgstr ""

#: ../../contributing.rst:143
msgid ""
"It is important to understand that each pull request must pass the full "
"test suite as part of the CI check. This test suite will run in the CI "
"anytime a pull request is opened or updated."
msgstr ""

#: ../../contributing.rst:149
msgid "Writing Tests"
msgstr ""

#: ../../contributing.rst:151
msgid ""
"We strongly encourage contributors to write good tests for their code as "
"part of the code review process. This helps ensure that your code is "
"doing what it should be doing."
msgstr ""

#: ../../contributing.rst:155
msgid ""
"We strongly encourage you to use our existing tests for both guidance and"
" homogeneity / consistency across our tests. We use ``pytest`` for our "
"tests. For more specific pytest guidance, please refer to the `pytest "
"documentation`_."
msgstr ""

#: ../../contributing.rst:159
msgid ""
"Within the ``pytest`` scope, :file:`conftest.py` files are used for "
"common code shared between modules that exist within the same directory "
"as that particular :file:`conftest.py` file."
msgstr ""

#: ../../contributing.rst:165
msgid "Unit Testing and eth-tester Tests"
msgstr ""

#: ../../contributing.rst:167
msgid ""
"Our unit tests are grouped together with tests against the ``eth-tester``"
" library, using the ``py-evm`` library as a backend, via the "
"``EthereumTesterProvider``."
msgstr ""

#: ../../contributing.rst:170
msgid ""
"These tests live under appropriately named child directories within the "
"``/tests`` directory. The core of these tests live under ``/tests/core``."
" Do your best to follow the existing structure when adding a test and "
"make sure that its location makes sense."
msgstr ""

#: ../../contributing.rst:176
msgid "Integration Testing"
msgstr ""

#: ../../contributing.rst:178
msgid ""
"Our integration test suite setup lives under the ``/tests/integration`` "
"directory. The integration test suite is dependent on what we call "
"\"fixtures\" (not to be confused with pytest fixtures). These zip file "
"fixtures, which also live in the ``/tests/integration`` directory, are "
"configured to run the specific client we are testing against along with a"
" genesis configuration that gives our tests some pre-determined useful "
"objects (like unlocked, pre-loaded accounts) to be able to interact with "
"the client when we run our tests."
msgstr ""

#: ../../contributing.rst:186
msgid ""
"The parent ``/integration`` directory houses some common configuration "
"shared across all client tests, whereas the ``/go_ethereum`` directory "
"houses common code to be shared across geth-specific provider tests. "
"Though the setup and run configurations exist across the different files "
"within ``/tests/integration``, our integration module tests are written "
"across different files within ``/web3/_utils/module_testing``."
msgstr ""

#: ../../contributing.rst:192
msgid ""
":file:`common.py` files within the client directories contain code that "
"is shared across all provider tests (http, ipc, and ws). This is mostly "
"used to override tests that span across all providers."
msgstr ""

#: ../../contributing.rst:195
msgid ""
":file:`conftest.py` files within each of these directories contain mostly"
" code that can be *used* by all test files that exist within the same "
"directory or subdirectories of the :file:`conftest.py` file. This is "
"mostly used to house pytest fixtures to be shared among our tests. Refer "
"to the `pytest documentation on fixtures`_ for more information."
msgstr ""

#: ../../contributing.rst:200
#, python-brace-format
msgid ""
"``test_{client}_{provider}.py`` files (e.g. "
":file:`test_goethereum_http.py`) are where client-and-provider-specific "
"test configurations exist. This is mostly used to override tests specific"
" to the provider type for the respective client."
msgstr ""

#: ../../contributing.rst:204
msgid ""
"The integration tests are each run in insolation to prevent muddied "
"contexts. Because they are run in isolation, they can be parallelized "
"with ``pytest-xdist`` in order to speed up the test suite. To run the "
"tests in parallel, you can use the ``-n`` flag with ``pytest``. For "
"example, to run the tests in parallel with 4 workers, you can use the "
"following command:"
msgstr ""

#: ../../contributing.rst:216
msgid "Working With Test Contracts"
msgstr ""

#: ../../contributing.rst:218
msgid ""
"Contracts used for testing exist under ``web3/_utils/contract_sources``. "
"These contracts get compiled via the ``compile_contracts.py`` script in "
"the same directory. To use this script, simply pass the Solidity version "
"to be used to compile the contracts as an argument at the command line."
msgstr ""

#: ../../contributing.rst:223
msgid "Arguments for the script are:"
msgstr ""

#: ../../contributing.rst:224
msgid ""
"-v or --version         Solidity version to be used to compile the "
"contracts. If"
msgstr ""

#: ../../contributing.rst:225
msgid "blank, the script uses the latest available version from solcx."
msgstr ""

#: ../../contributing.rst:228
msgid ""
"-f or --filename        If left blank, all .sol files will be compiled "
"and the"
msgstr ""

#: ../../contributing.rst:229
msgid ""
"respective contract data will be generated. Pass in a specific ``.sol`` "
"filename here to compile just one file."
msgstr ""

#: ../../contributing.rst:233
msgid ""
"To run the script, you will need the ``py-solc-x`` library for compiling "
"the files as well as ``black`` for code formatting. You can install those"
" with:"
msgstr ""

#: ../../contributing.rst:240
msgid ""
"The following example compiles all the contracts and generates their "
"respective contract data that is used across our test files for the test "
"suites. This data gets generated within the ``contract_data`` "
"subdirectory within the ``contract_sources`` folder."
msgstr ""

#: ../../contributing.rst:254
msgid ""
"To compile and generate contract data for only one ``.sol`` file, specify"
" using the filename with the ``-f`` (or ``--filename``) argument flag."
msgstr ""

#: ../../contributing.rst:264
msgid ""
"If there is any contract data that is not generated via the script but is"
" important to pass on to the integration tests, the "
"``_custom_contract_data.py`` file within the ``contract_data`` "
"subdirectory can be used to store that information when appropriate."
msgstr ""

#: ../../contributing.rst:268
msgid ""
"Be sure to re-generate the integration test fixture after running the "
"script to update the contract bytecodes for the integration test suite - "
"see the :ref:`generating_fixtures` section below."
msgstr ""

#: ../../contributing.rst:274
msgid "Manual Testing"
msgstr ""

#: ../../contributing.rst:276
msgid ""
"To import and test an unreleased version of web3.py in another context, "
"you can install it from your development directory:"
msgstr ""

#: ../../contributing.rst:285
msgid "Code Style"
msgstr ""

#: ../../contributing.rst:287
msgid ""
"We use `pre-commit <https://pre-commit.com/>`_ to enforce a consistent "
"code style across the library. This tool runs automatically with every "
"commit, but you can also run it manually with:"
msgstr ""

#: ../../contributing.rst:296
msgid ""
"If you need to make a commit that skips the ``pre-commit`` checks, you "
"can do so with ``git commit --no-verify``."
msgstr ""

#: ../../contributing.rst:299
msgid ""
"We use Black as part of our linting. To ignore the commits that "
"introduced Black in git history, you can configure your git environment "
"like so:"
msgstr ""

#: ../../contributing.rst:307
msgid ""
"This library uses `type hints`_, which are enforced by the ``mypy`` tool "
"(part of the ``pre-commit`` checks). All new code is required to land "
"with type hints, with the exception of code within the ``tests`` "
"directory."
msgstr ""

#: ../../contributing.rst:313
msgid "Documentation"
msgstr ""

#: ../../contributing.rst:315
msgid ""
"Good documentation will lead to quicker adoption and happier users. "
"Please check out our guide on `how to create documentation`_ for the "
"Python Ethereum ecosystem."
msgstr ""

#: ../../contributing.rst:319
msgid ""
"Pull requests generate their own preview of the latest documentation at "
"``https://web3py--<pr-number>.org.readthedocs.build/en/<pr-number>/``."
msgstr ""

#: ../../contributing.rst:324
msgid "Pull Requests"
msgstr ""

#: ../../contributing.rst:326
msgid ""
"It's a good idea to make pull requests early on. A pull request "
"represents the start of a discussion, and doesn't necessarily need to be "
"the final, finished submission."
msgstr ""

#: ../../contributing.rst:330
msgid "See GitHub's documentation for `working on pull requests`_."
msgstr ""

#: ../../contributing.rst:332
msgid ""
"Once you've made a pull request take a look at the Circle CI build status"
" in the GitHub interface and make sure all tests are passing. In general,"
" pull requests that do not pass the CI build yet won't get reviewed "
"unless explicitly requested."
msgstr ""

#: ../../contributing.rst:337
msgid ""
"If the pull request introduces changes that should be reflected in the "
"release notes, please add a **newsfragment** file as explained `here "
"<https://github.com/ethereum/web3.py/blob/main/newsfragments/README.md>`_."
msgstr ""

#: ../../contributing.rst:341
msgid ""
"If possible, the change to the release notes file should be included in "
"the commit that introduces the feature or bugfix."
msgstr ""

#: ../../contributing.rst:347
msgid "Generating New Fixtures"
msgstr ""

#: ../../contributing.rst:349
msgid ""
"Our integration tests make use of Geth private networks. When new "
"versions of the client software are introduced, new fixtures should be "
"generated."
msgstr ""

#: ../../contributing.rst:353
msgid ""
"Before generating new fixtures, make sure you have the test dependencies "
"installed:"
msgstr ""

#: ../../contributing.rst:361
msgid ""
"A \"fixture\" is a pre-synced network. It's the result of configuring and"
" running a client, deploying the test contracts, and saving the resulting"
" state for testing web3.py functionality against."
msgstr ""

#: ../../contributing.rst:367
msgid "Geth Fixtures"
msgstr ""

#: ../../contributing.rst:369
msgid ""
"Install the desired Geth version on your machine locally. We recommend "
"`py-geth`_ for this purpose, because it enables you to easily manage "
"multiple versions of Geth."
msgstr ""

#: ../../contributing.rst:372
msgid ""
"Note that ``py-geth`` will need updating to support each new Geth version"
" as well. Adding newer Geth versions to py-geth is straightforward; see "
"past commits for a template."
msgstr ""

#: ../../contributing.rst:375
msgid ""
"If py-geth has the Geth version you need, install that version locally. "
"For example:"
msgstr ""

#: ../../contributing.rst:381
msgid ""
"Specify the Geth binary and run the fixture creation script (from within "
"the web3.py directory):"
msgstr ""

#: ../../contributing.rst:387
msgid ""
"The output of this script is your fixture, a zip file, which is now "
"stored in ``/tests/integration/``. The "
"``/tests/integration/go_ethereum/conftest.py`` and "
"``/web3/tools/benchmark/node.py`` files should be updated automatically "
"to point to this new fixture. Delete the old fixture."
msgstr ""

#: ../../contributing.rst:392
msgid ""
"Run the tests. To ensure that the tests run with the correct Geth version"
" locally, you may again include the ``GETH_BINARY`` environment variable."
msgstr ""

#: ../../contributing.rst:395
msgid ""
"The ``geth_version`` and ``pygeth_version`` parameter defaults in "
"``/.circleci/config.yml`` should be automatically updated to match the "
"``go-ethereum`` version used to generate the test fixture and the ``py-"
"geth`` version that supports installing it."
msgstr ""

#: ../../contributing.rst:402
msgid "CI Testing With a Nightly Geth Build"
msgstr ""

#: ../../contributing.rst:404
msgid ""
"Occasionally you'll want to have CI run the test suite against an "
"unreleased version of Geth - e.g. to test upcoming hard fork changes. The"
" workflow described below is for testing only, as updates will only be "
"merged into main once the Geth release is published and the test runs are"
" updated to use the new stable version."
msgstr ""

#: ../../contributing.rst:409
msgid ""
"Configure ``tests/integration/generate_fixtures/go_ethereum/common.py`` "
"as needed."
msgstr ""

#: ../../contributing.rst:411
msgid ""
"Geth automagically compiles new builds for every commit that gets merged "
"into the codebase. Download the desired build from the `develop builds "
"<https://geth.ethereum.org/downloads/>`_."
msgstr ""

#: ../../contributing.rst:414
msgid ""
"Build your test fixture, passing in the binary you just downloaded via "
"``GETH_BINARY``. Don't forget to update the "
"``/tests/integration/go_ethereum/conftest.py`` file to point to your new "
"fixture."
msgstr ""

#: ../../contributing.rst:417
msgid ""
"Our CI runs on Ubuntu, so download the corresponding 64-bit Linux "
"`develop build <https://geth.ethereum.org/downloads/>`_, then add it to "
"the root of your web3.py directory. Rename the binary ``custom_geth``."
msgstr ""

#: ../../contributing.rst:421
msgid ""
"In ``.circleci/config.yml``, update the ``geth_version`` pipeline "
"parameter to \"custom\". This will trigger the custom Geth build to be "
"used in the CI test suite."
msgstr ""

#: ../../contributing.rst:424
msgid "Create a PR and let CI do its thing."
msgstr ""

#: ../../contributing.rst:428
msgid "Releasing"
msgstr ""

#: ../../contributing.rst:430
msgid ""
"Releases are typically done from the ``main`` branch, except when "
"releasing a beta (in which case the beta is released from ``main``, and "
"the previous stable branch is released from said branch)."
msgstr ""

#: ../../contributing.rst:435
msgid "Final test before each release"
msgstr ""

#: ../../contributing.rst:437
msgid ""
"Before releasing a new version, build and test the package that will be "
"released:"
msgstr ""

#: ../../contributing.rst:444
msgid ""
"This will build the package and install it in a temporary virtual "
"environment. Follow the instructions to activate the venv and test "
"whatever you think is important."
msgstr ""

#: ../../contributing.rst:447
msgid "Review the documentation that will get published:"
msgstr ""

#: ../../contributing.rst:453
msgid "Validate and preview the release notes:"
msgstr ""

#: ../../contributing.rst:460
msgid "Build the release notes"
msgstr ""

#: ../../contributing.rst:462
msgid ""
"Before bumping the version number, build the release notes. You must "
"include the part of the version to bump (see below), which changes how "
"the version number will show in the release notes."
msgstr ""

#: ../../contributing.rst:470
msgid "If there are any errors, be sure to re-run make notes until it works."
msgstr ""

#: ../../contributing.rst:473
msgid "Push the release to github & pypi"
msgstr ""

#: ../../contributing.rst:475
msgid ""
"After confirming that the release package looks okay, release a new "
"version:"
msgstr ""

#: ../../contributing.rst:481
msgid "This command will:"
msgstr ""

#: ../../contributing.rst:483
msgid ""
"Bump the version number as specified in ``.pyproject.toml`` and "
"``setup.py``."
msgstr ""

#: ../../contributing.rst:484
msgid "Create a git commit and tag for the new version."
msgstr ""

#: ../../contributing.rst:485
msgid "Build the package."
msgstr ""

#: ../../contributing.rst:486
msgid "Push the commit and tag to github."
msgstr ""

#: ../../contributing.rst:487
msgid "Push the new package files to pypi."
msgstr ""

#: ../../contributing.rst:490
msgid "Which version part to bump"
msgstr ""

#: ../../contributing.rst:492
msgid ""
"``$$VERSION_PART_TO_BUMP$$`` must be one of: ``major``, ``minor``, "
"``patch``, ``stage``, or ``devnum``."
msgstr ""

#: ../../contributing.rst:495
#, python-brace-format
msgid ""
"The version format for this repo is ``{major}.{minor}.{patch}`` for "
"stable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable "
"(``stage`` can be alpha or beta)."
msgstr ""

#: ../../contributing.rst:499
msgid ""
"If you are in a beta version, ``make release bump=stage`` will switch to "
"a stable."
msgstr ""

#: ../../contributing.rst:501
msgid ""
"To issue an unstable version when the current version is stable, specify "
"the new version explicitly, like ``make release bump=\"--new-version "
"4.0.0-alpha.1\"``."
msgstr ""

#: ../../contributing.rst:504
msgid ""
"You can see what the result of bumping any particular version part would "
"be with ``bump-my-version show-bump``."
msgstr ""
