# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2025, The Ethereum Foundation
# This file is distributed under the same license as the web3.py package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: web3.py 7.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-06 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../providers.rst:4
msgid "Providers"
msgstr "提供者"

#: ../../providers.rst:6
msgid ""
"Using Ethereum requires access to an Ethereum node. If you have the "
"means, you're encouraged to `run your own node`_. (Note that you do not "
"need to stake ether to run a node.) If you're unable to run your own "
"node, you can use a `remote node`_."
msgstr ""

#: ../../providers.rst:10
msgid ""
"Once you have access to a node, you can connect to it using a "
"**provider**. Providers generate `JSON-RPC`_ requests and return the "
"response. This is done by submitting the request to an HTTP, WebSocket, "
"or IPC socket-based server."
msgstr ""

#: ../../providers.rst:16
msgid ""
"web3.py supports one provider per instance. If you have an advanced use "
"case that requires multiple providers, create and configure a new web3 "
"instance per connection."
msgstr ""

#: ../../providers.rst:20
msgid ""
"If you are already happily connected to your Ethereum node, then you can "
"skip the rest of this providers section."
msgstr ""

#: ../../providers.rst:30
msgid "Choosing a Provider"
msgstr ""

#: ../../providers.rst:32
msgid "Most nodes have a variety of ways to connect to them. Most commonly:"
msgstr ""

#: ../../providers.rst:34
msgid "IPC (uses local filesystem: fastest and most secure)"
msgstr ""

#: ../../providers.rst:35
msgid "WebSocket (works remotely, faster than HTTP)"
msgstr ""

#: ../../providers.rst:36
msgid "HTTP (more nodes support it)"
msgstr ""

#: ../../providers.rst:38
msgid "If you're not sure how to decide, choose this way:"
msgstr ""

#: ../../providers.rst:40
msgid ""
"If you have the option of running web3.py on the same machine as the "
"node, choose IPC."
msgstr ""

#: ../../providers.rst:41
msgid "If you must connect to a node on a different computer, use WebSocket."
msgstr ""

#: ../../providers.rst:42
msgid "If your node does not support WebSocket, use HTTP."
msgstr ""

#: ../../providers.rst:44
msgid ""
"Once you have decided how to connect, you'll select and configure the "
"appropriate provider class:"
msgstr ""

#: ../../providers.rst:47
msgid ":class:`~web3.providers.rpc.HTTPProvider`"
msgstr ""

#: ../../providers.rst:48
msgid ":class:`~web3.providers.ipc.IPCProvider`"
msgstr ""

#: ../../providers.rst:49
msgid ":class:`~web3.providers.async_rpc.AsyncHTTPProvider`"
msgstr ""

#: ../../providers.rst:50
msgid ""
":class:`~web3.providers.persistent.AsyncIPCProvider` (Persistent "
"Connection Provider)"
msgstr ""

#: ../../providers.rst:51
msgid ""
":class:`~web3.providers.persistent.WebSocketProvider` (Persistent "
"Connection Provider)"
msgstr ""

#: ../../providers.rst:53
msgid ""
"Each provider above links to the documentation on how to properly "
"initialize that provider. Once you have reviewed the relevant "
"documentation for the provider of your choice, you are ready to :ref:`get"
" started with web3.py<first_w3_use>`."
msgstr ""

#: ../../providers.rst:58
msgid "Provider via Environment Variable"
msgstr ""

#: ../../providers.rst:60
msgid ""
"Alternatively, you can set the environment variable ``WEB3_PROVIDER_URI``"
" before starting your script, and web3 will look for that provider first."
msgstr ""

#: ../../providers.rst:63
msgid "Valid formats for this environment variable are:"
msgstr ""

#: ../../providers.rst:65
msgid "``file:///path/to/node/rpc-json/file.ipc``"
msgstr ""

#: ../../providers.rst:66
msgid "``http://192.168.1.2:8545``"
msgstr ""

#: ../../providers.rst:67
msgid "``https://node.ontheweb.com``"
msgstr ""

#: ../../providers.rst:68
msgid "``ws://127.0.0.1:8546``"
msgstr ""

#: ../../providers.rst:72
msgid "Auto-initialization Provider Shortcuts"
msgstr ""

#: ../../providers.rst:75
msgid "Geth dev Proof of Authority"
msgstr ""

#: ../../providers.rst:77
msgid ""
"To connect to a ``geth --dev`` Proof of Authority instance with the POA "
"middleware loaded by default:"
msgstr ""

#: ../../providers.rst:88
msgid "Or, connect to an async web3 instance:"
msgstr ""

#: ../../providers.rst:101
msgid "Built In Providers"
msgstr ""

#: ../../providers.rst:103
msgid ""
"Web3 ships with the following providers which are appropriate for "
"connecting to local and remote JSON-RPC servers."
msgstr ""

#: ../../providers.rst:108
msgid "HTTPProvider"
msgstr ""

#: ../../providers.rst:112
msgid ""
"This provider handles interactions with an HTTP or HTTPS based JSON-RPC "
"server."
msgstr ""

#: ../../providers.rst:114 ../../providers.rst:192
msgid ""
"``endpoint_uri`` should be the full URI to the RPC endpoint such as "
"``'https://localhost:8545'``.  For RPC servers behind HTTP connections "
"running on port 80 and HTTPS connections running on port 443 the port can"
" be omitted from the URI."
msgstr ""

#: ../../providers.rst:118 ../../providers.rst:196
msgid ""
"``request_kwargs`` should be a dictionary of keyword arguments which will"
" be passed onto each http/https POST request made to your node."
msgstr ""

#: ../../providers.rst:120
msgid ""
"``session`` allows you to pass a ``requests.Session`` object initialized "
"as desired."
msgstr ""

#: ../../providers.rst:122 ../../providers.rst:198
msgid ""
"``exception_retry_configuration`` is an instance of the "
":class:`~web3.providers.rpc.utils.ExceptionRetryConfiguration` class "
"which allows you to configure how the provider should handle exceptions "
"when making certain requests. Setting this to ``None`` will disable "
"exception retries."
msgstr ""

#: ../../providers.rst:133
msgid ""
"Note that you should create only one HTTPProvider with the same provider "
"URL per python process, as the HTTPProvider recycles underlying TCP/IP "
"network connections, for better performance. Multiple HTTPProviders with "
"different URLs will work as expected."
msgstr ""

#: ../../providers.rst:138
msgid ""
"Under the hood, the ``HTTPProvider`` uses the python requests library for"
" making requests.  If you would like to modify how requests are made, you"
" can use the ``request_kwargs`` to do so.  A common use case for this is "
"increasing the timeout for each request."
msgstr ""

#: ../../providers.rst:150
msgid ""
"To tune the connection pool size, you can pass your own "
"``requests.Session``."
msgstr ""

#: ../../providers.rst:163
msgid "IPCProvider"
msgstr ""

#: ../../providers.rst:167
msgid ""
"This provider handles interaction with an IPC Socket based JSON-RPC "
"server."
msgstr ""

#: ../../providers.rst:170 ../../providers.rst:282
msgid "``ipc_path`` is the filesystem path to the IPC socket:"
msgstr ""

#: ../../providers.rst:177 ../../providers.rst:293
msgid ""
"If no ``ipc_path`` is specified, it will use a default depending on your "
"operating system."
msgstr ""

#: ../../providers.rst:180 ../../providers.rst:296
msgid "On Linux and FreeBSD: ``~/.ethereum/geth.ipc``"
msgstr ""

#: ../../providers.rst:181 ../../providers.rst:297
msgid "On Mac OS: ``~/Library/Ethereum/geth.ipc``"
msgstr ""

#: ../../providers.rst:182 ../../providers.rst:298
msgid "On Windows: ``\\\\.\\pipe\\geth.ipc``"
msgstr ""

#: ../../providers.rst:186
msgid "AsyncHTTPProvider"
msgstr ""

#: ../../providers.rst:190
msgid ""
"This provider handles interactions with an HTTP or HTTPS based JSON-RPC "
"server asynchronously."
msgstr ""

#: ../../providers.rst:204
msgid ""
"The ``cache_async_session()`` method allows you to use your own "
"``aiohttp.ClientSession`` object."
msgstr ""

#: ../../providers.rst:220
msgid ""
"Under the hood, the ``AsyncHTTPProvider`` uses the python `aiohttp "
"<https://docs.aiohttp.org/en/stable/>`_ library for making requests."
msgstr ""

#: ../../providers.rst:224
msgid "Persistent Connection Providers"
msgstr ""

#: ../../providers.rst:227
msgid "Persistent Connection Base Class"
msgstr ""

#: ../../providers.rst:230
msgid ""
"This class is not meant to be used directly. If your provider class "
"inherits from this class, look to these docs for additional configuration"
" options."
msgstr ""

#: ../../providers.rst:241
msgid "This is a base provider class, inherited by the following providers:"
msgstr ""

#: ../../providers.rst:243
msgid ":class:`~web3.providers.persistent.WebSocketProvider`"
msgstr ""

#: ../../providers.rst:244
msgid ":class:`~web3.providers.persistent.AsyncIPCProvider`"
msgstr ""

#: ../../providers.rst:246
msgid ""
"It handles interactions with a persistent connection to a JSON-RPC "
"server. Among its configuration, it houses all of the "
":class:`~web3.providers.persistent.request_processor.RequestProcessor` "
"logic for handling the asynchronous sending and receiving of requests and"
" responses. See the :ref:`internals__persistent_connection_providers` "
"section for more details on the internals of persistent connection "
"providers."
msgstr ""

#: ../../providers.rst:253
msgid ""
"``request_timeout`` is the timeout in seconds, used when sending data "
"over the connection and waiting for a response to be received from the "
"listener task. Defaults to ``50.0``."
msgstr ""

#: ../../providers.rst:257
msgid ""
"``subscription_response_queue_size`` is the size of the queue used to "
"store subscription responses, defaults to ``500``. While messages are "
"being consumed, this queue should never fill up as it is a transient "
"queue and meant to handle asynchronous receiving and processing of "
"responses. When in sync with the socket stream, this queue should only "
"ever store 1 to a few messages at a time."
msgstr ""

#: ../../providers.rst:263
msgid ""
"``silence_listener_task_exceptions`` is a boolean that determines whether"
" exceptions raised by the listener task are silenced. Defaults to "
"``False``, raising any exceptions that occur in the listener task."
msgstr ""

#: ../../providers.rst:267
msgid ""
"``max_connection_retries`` is the maximum number of times to retry a "
"connection to the provider when initializing the provider. Defaults to "
"``5``."
msgstr ""

#: ../../providers.rst:270
msgid ""
"``request_information_cache_size`` specifies the size of the transient "
"cache for storing request details, enabling the provider to process "
"responses based on the original request information. Defaults to ``500``."
msgstr ""

#: ../../providers.rst:275
msgid "AsyncIPCProvider"
msgstr ""

#: ../../providers.rst:279
msgid ""
"This provider handles asynchronous, persistent interaction with an IPC "
"Socket based JSON-RPC server."
msgstr ""

#: ../../providers.rst:283
msgid ""
"``read_buffer_limit`` is the maximum size of data, in bytes, that can be "
"read from the socket at one time. Defaults to 20MB (20 * 1024 * 1024). "
"Raises ``ReadBufferLimitReached`` if the limit is reached, suggesting "
"that the buffer limit be increased."
msgstr ""

#: ../../providers.rst:288 ../../providers.rst:314
msgid ""
"This provider inherits from the "
":class:`~web3.providers.persistent.PersistentConnectionProvider` class. "
"Refer to the "
":class:`~web3.providers.persistent.PersistentConnectionProvider` "
"documentation for details on additional configuration options available "
"for this provider."
msgstr ""

#: ../../providers.rst:301
msgid "WebSocketProvider"
msgstr ""

#: ../../providers.rst:305 ../../providers.rst:541
msgid ""
"This provider handles interactions with an WS or WSS based JSON-RPC "
"server."
msgstr ""

#: ../../providers.rst:307 ../../providers.rst:543
msgid ""
"``endpoint_uri`` should be the full URI to the RPC endpoint such as "
"``'ws://localhost:8546'``."
msgstr ""

#: ../../providers.rst:309 ../../providers.rst:547
msgid ""
"``websocket_kwargs`` this should be a dictionary of keyword arguments "
"which will be passed onto the ws/wss websocket connection."
msgstr ""

#: ../../providers.rst:311
msgid ""
"``use_text_frames`` will ensure websocket data is sent as text frames for"
" servers that do not support binary communication."
msgstr ""

#: ../../providers.rst:319
msgid ""
"Under the hood, the ``WebSocketProvider`` uses the python websockets "
"library for making requests.  If you would like to modify how requests "
"are made, you can use the ``websocket_kwargs`` to do so.  See the "
"`websockets documentation`_ for available arguments."
msgstr ""

#: ../../providers.rst:328
msgid "Using Persistent Connection Providers"
msgstr ""

#: ../../providers.rst:330
msgid ""
"The ``AsyncWeb3`` class may be used as a context manager, utilizing the "
"``async with`` syntax, when instantiating with a "
":class:`~web3.providers.persistent.PersistentConnectionProvider`. This "
"will automatically close the connection when the context manager exits "
"and is the recommended way to initiate a persistent connection to the "
"provider."
msgstr ""

#: ../../providers.rst:336
msgid ""
"A similar example using a ``websockets`` connection as an asynchronous "
"context manager can be found in the `websockets connection`_ docs."
msgstr ""

#: ../../providers.rst:383
msgid ""
"The ``AsyncWeb3`` class may also be used as an asynchronous iterator, "
"utilizing the ``async for`` syntax, when instantiating with a "
":class:`~web3.providers.persistent.PersistentConnectionProvider`. This "
"may be used to set up an indefinite websocket connection and reconnect "
"automatically if the connection is lost."
msgstr ""

#: ../../providers.rst:389
msgid ""
"A similar example using a ``websockets`` connection as an asynchronous "
"iterator can be found in the `websockets connection`_ docs."
msgstr ""

#: ../../providers.rst:416
msgid ""
"Awaiting the instantiation with a "
":class:`~web3.providers.persistent.PersistentConnectionProvider`, or "
"instantiating and awaiting the ``connect()`` method is also possible. "
"Both of these examples are shown below."
msgstr ""

#: ../../providers.rst:450
msgid ""
":class:`~web3.providers.persistent.PersistentConnectionProvider` classes "
"use the "
":class:`~web3.providers.persistent.request_processor.RequestProcessor` "
"class under the hood to sync up the receiving of responses and response "
"processing for one-to-one and one-to-many request-to-response requests. "
"Refer to the "
":class:`~web3.providers.persistent.request_processor.RequestProcessor` "
"documentation for details."
msgstr ""

#: ../../providers.rst:458
msgid "AsyncWeb3 with Persistent Connection Providers"
msgstr ""

#: ../../providers.rst:460
msgid ""
"When an ``AsyncWeb3`` class is connected to a "
":class:`~web3.providers.persistent.PersistentConnectionProvider`, some "
"attributes and methods become available."
msgstr ""

#: ../../providers.rst:466
msgid ""
"The public API for interacting with the websocket connection is available"
" via the ``socket`` attribute of the ``Asyncweb3`` class. This attribute "
"is an instance of the "
":class:`~web3.providers.persistent.persistent_connection.PersistentConnection`"
" class and is the main interface for interacting with the socket "
"connection."
msgstr ""

#: ../../providers.rst:474
msgid "Interacting with the Persistent Connection"
msgstr ""

#: ../../providers.rst:478
msgid ""
"This class handles interactions with a persistent socket connection. It "
"is available via the ``socket`` attribute on the ``AsyncWeb3`` class. The"
" ``PersistentConnection`` class has the following methods and attributes:"
msgstr ""

#: ../../providers.rst:484
msgid ""
"This attribute returns the current active subscriptions as a dict mapping"
" the subscription ``id`` to a dict of metadata about the subscription "
"request."
msgstr ""

#: ../../providers.rst:490
msgid ""
"This method is available for listening to websocket subscriptions "
"indefinitely. It is an asynchronous iterator that yields strictly one-to-"
"many (e.g. ``eth_subscription`` responses) request-to-response messages "
"from the websocket connection. To receive responses for one-to-one "
"request-to-response calls, use the standard API for making requests via "
"the appropriate module (e.g. ``block_num = await w3.eth.block_number``)"
msgstr ""

#: ../../providers.rst:497
msgid ""
"The responses from this method are formatted by *web3.py* formatters and "
"run through the middleware that were present at the time of subscription."
" Examples on how to use this method can be seen above in the `Using "
"Persistent Connection Providers`_ section."
msgstr ""

#: ../../providers.rst:504
msgid ""
"This method is available strictly for sending raw requests to the socket,"
" if desired. It is not recommended to use this method directly, as the "
"responses will not be formatted by *web3.py* formatters or run through "
"the middleware. Instead, use the methods available on the respective web3"
" module. For example, use ``w3.eth.get_block(\"latest\")`` instead of "
"``w3.socket.send(\"eth_getBlockByNumber\", [\"latest\", True])``."
msgstr ""

#: ../../providers.rst:513
msgid ""
"The ``recv()`` method can be used to receive the next response for a "
"request from the socket. The response from this method is the raw "
"response. This is not the recommended way to receive a response for a "
"request, as it is not formatted by *web3.py* formatters or run through "
"the middleware. Instead, use the methods available on the respective web3"
" module (e.g. ``block_num = await w3.eth.block_number``) for retrieving "
"responses for one-to-one request-to-response calls."
msgstr ""

#: ../../providers.rst:523
msgid ""
"This method is available for making requests to the socket and retrieving"
" the response. It is not recommended to use this method directly, as the "
"responses will not be properly formatted by *web3.py* formatters or run "
"through the middleware. Instead, use the methods available on the "
"respective web3 module. For example, use ``w3.eth.get_block(\"latest\")``"
" instead of ``w3.socket.make_request(\"eth_getBlockByNumber\", "
"[\"latest\", True])``."
msgstr ""

#: ../../providers.rst:532
msgid "LegacyWebSocketProvider"
msgstr ""

#: ../../providers.rst:536
msgid ""
"``LegacyWebSocketProvider`` is deprecated and is likely to be removed in "
"a future major release. Please use ``WebSocketProvider`` instead."
msgstr ""

#: ../../providers.rst:545
msgid ""
"``websocket_timeout`` is the timeout in seconds, used when receiving or "
"sending data over the connection. Defaults to 10."
msgstr ""

#: ../../providers.rst:555
msgid ""
"Under the hood, ``LegacyWebSocketProvider`` uses the python "
"``websockets`` library for making requests.  If you would like to modify "
"how requests are made, you can use the ``websocket_kwargs`` to do so.  "
"See the `websockets documentation`_ for available arguments."
msgstr ""

#: ../../providers.rst:562
msgid ""
"Unlike HTTP connections, the timeout for WS connections is controlled by "
"a separate ``websocket_timeout`` argument, as shown below."
msgstr ""

#: ../../providers.rst:573
msgid "AutoProvider"
msgstr ""

#: ../../providers.rst:575
msgid ""
":class:`~web3.providers.auto.AutoProvider` is the default used when "
"initializing :class:`web3.Web3` without any providers. There's rarely a "
"reason to use it explicitly."
msgstr ""

#: ../../providers.rst:582
msgid "EthereumTesterProvider"
msgstr ""

#: ../../providers.rst:584
msgid ""
"Experimental:  This provider is experimental. There are still significant"
" gaps in functionality. However it is being actively developed and "
"supported."
msgstr ""

#: ../../providers.rst:590
msgid ""
"This provider integrates with the ``eth-tester`` library. The "
"``ethereum_tester`` constructor argument should be an instance of the "
":class:`~eth_tester.EthereumTester` or a subclass of "
":class:`~eth_tester.backends.base.BaseChainBackend` class provided by the"
" ``eth-tester`` library. The ``api_endpoints`` argument should be a "
"``dict`` of RPC endpoints. You can see the structure and defaults `here "
"<https://github.com/ethereum/web3.py/blob/283b536c7d53e605c61468941e3fc07a6c5d0c09/web3/providers/eth_tester/defaults.py#L228>`_."
" If you would like a custom ``eth-tester`` instance to test with, see the"
" ``eth-tester`` library `documentation <https://github.com/ethereum/eth-"
"tester>`_ for details."
msgstr ""

#: ../../providers.rst:604
msgid ""
"To install the needed dependencies to use EthereumTesterProvider, you can"
" install the pip extras package that has the correct interoperable "
"versions of the ``eth-tester`` and ``py-evm`` dependencies needed: e.g. "
"``pip install \"web3[tester]\"``"
msgstr ""
