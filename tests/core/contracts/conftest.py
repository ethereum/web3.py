import functools
import json
import pytest

from eth_utils import (
    event_signature_to_log_topic,
)
import pytest_asyncio

from tests.core.contracts.utils import (
    async_deploy,
    deploy,
)
from tests.utils import (
    async_partial,
)
from web3._utils.module_testing.emitter_contract import (
    EMITTER_CONTRACT_ABI,
    EMITTER_CONTRACT_BYTECODE,
    EMITTER_CONTRACT_RUNTIME,
)
from web3._utils.module_testing.event_contract import (
    EVENT_CONTRACT_ABI,
    EVENT_CONTRACT_CODE,
    EVENT_CONTRACT_RUNTIME,
)
from web3._utils.module_testing.fallback_contract import (
    CONTRACT_FALLBACK_FUNCTION_ABI,
    CONTRACT_FALLBACK_FUNCTION_CODE,
    CONTRACT_FALLBACK_FUNCTION_RUNTIME,
)
from web3._utils.module_testing.indexed_event_contract import (
    IND_EVENT_CONTRACT_ABI,
    IND_EVENT_CONTRACT_CODE,
    IND_EVENT_CONTRACT_RUNTIME,
)
from web3._utils.module_testing.no_receive_contract import (
    CONTRACT_NO_RECEIVE_FUNCTION_ABI,
    CONTRACT_NO_RECEIVE_FUNCTION_CODE,
    CONTRACT_NO_RECEIVE_FUNCTION_RUNTIME,
)
from web3._utils.module_testing.receive_contract import (
    CONTRACT_RECEIVE_FUNCTION_ABI,
    CONTRACT_RECEIVE_FUNCTION_CODE,
    CONTRACT_RECEIVE_FUNCTION_RUNTIME,
)
from web3._utils.module_testing.revert_contract import (
    _REVERT_CONTRACT_ABI,
    REVERT_CONTRACT_BYTECODE,
    REVERT_CONTRACT_RUNTIME_CODE,
)

CONTRACT_NESTED_TUPLE_SOURCE = """
pragma solidity >=0.4.19 <0.6.0;
pragma experimental ABIEncoderV2;

contract Tuple {
    struct U { int x; int y; }
    struct T { U[] u; }
    struct S { T[] t; }

    function method(S memory s) public pure returns (S memory) {
        return s;
    }
}
"""
CONTRACT_NESTED_TUPLE_CODE = "0x608060405234801561001057600080fd5b50610575806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632655aef114610046575b600080fd5b34801561005257600080fd5b5061006d600480360361006891908101906102a2565b610083565b60405161007a919061043e565b60405180910390f35b61008b610093565b819050919050565b602060405190810160405280606081525090565b600082601f83011215156100ba57600080fd5b81356100cd6100c88261048d565b610460565b9150818183526020840193506020810190508360005b8381101561011357813586016100f98882610206565b8452602084019350602083019250506001810190506100e3565b5050505092915050565b600082601f830112151561013057600080fd5b813561014361013e826104b5565b610460565b9150818183526020840193506020810190508385604084028201111561016857600080fd5b60005b83811015610198578161017e8882610256565b84526020840193506040830192505060018101905061016b565b5050505092915050565b60006101ae8235610531565b905092915050565b6000602082840312156101c857600080fd5b6101d26020610460565b9050600082013567ffffffffffffffff8111156101ee57600080fd5b6101fa848285016100a7565b60008301525092915050565b60006020828403121561021857600080fd5b6102226020610460565b9050600082013567ffffffffffffffff81111561023e57600080fd5b61024a8482850161011d565b60008301525092915050565b60006040828403121561026857600080fd5b6102726040610460565b90506000610282848285016101a2565b6000830152506020610296848285016101a2565b60208301525092915050565b6000602082840312156102b457600080fd5b600082013567ffffffffffffffff8111156102ce57600080fd5b6102da848285016101b6565b91505092915050565b60006102ee826104f7565b80845260208401935083602082028501610307856104dd565b60005b848110156103405783830388526103228383516103e5565b925061032d8261050d565b915060208801975060018101905061030a565b508196508694505050505092915050565b600061035c82610502565b80845260208401935061036e836104ea565b60005b828110156103a05761038486835161040f565b61038d8261051a565b9150604086019550600181019050610371565b50849250505092915050565b6103b581610527565b82525050565b600060208301600083015184820360008601526103d882826102e3565b9150508091505092915050565b600060208301600083015184820360008601526104028282610351565b9150508091505092915050565b60408201600082015161042560008501826103ac565b50602082015161043860208501826103ac565b50505050565b6000602082019050818103600083015261045881846103bb565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561048357600080fd5b8060405250919050565b600067ffffffffffffffff8211156104a457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156104cc57600080fd5b602082029050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b60008190509190505600a265627a7a7230582011dc176b6cffda1d2e58827bca1a16178776c2d8efcd6adf48bc0223f14f891a6c6578706572696d656e74616cf50037"  # noqa: E501
CONTRACT_NESTED_TUPLE_RUNTIME = "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632655aef114610046575b600080fd5b34801561005257600080fd5b5061006d600480360361006891908101906102a2565b610083565b60405161007a919061043e565b60405180910390f35b61008b610093565b819050919050565b602060405190810160405280606081525090565b600082601f83011215156100ba57600080fd5b81356100cd6100c88261048d565b610460565b9150818183526020840193506020810190508360005b8381101561011357813586016100f98882610206565b8452602084019350602083019250506001810190506100e3565b5050505092915050565b600082601f830112151561013057600080fd5b813561014361013e826104b5565b610460565b9150818183526020840193506020810190508385604084028201111561016857600080fd5b60005b83811015610198578161017e8882610256565b84526020840193506040830192505060018101905061016b565b5050505092915050565b60006101ae8235610531565b905092915050565b6000602082840312156101c857600080fd5b6101d26020610460565b9050600082013567ffffffffffffffff8111156101ee57600080fd5b6101fa848285016100a7565b60008301525092915050565b60006020828403121561021857600080fd5b6102226020610460565b9050600082013567ffffffffffffffff81111561023e57600080fd5b61024a8482850161011d565b60008301525092915050565b60006040828403121561026857600080fd5b6102726040610460565b90506000610282848285016101a2565b6000830152506020610296848285016101a2565b60208301525092915050565b6000602082840312156102b457600080fd5b600082013567ffffffffffffffff8111156102ce57600080fd5b6102da848285016101b6565b91505092915050565b60006102ee826104f7565b80845260208401935083602082028501610307856104dd565b60005b848110156103405783830388526103228383516103e5565b925061032d8261050d565b915060208801975060018101905061030a565b508196508694505050505092915050565b600061035c82610502565b80845260208401935061036e836104ea565b60005b828110156103a05761038486835161040f565b61038d8261051a565b9150604086019550600181019050610371565b50849250505092915050565b6103b581610527565b82525050565b600060208301600083015184820360008601526103d882826102e3565b9150508091505092915050565b600060208301600083015184820360008601526104028282610351565b9150508091505092915050565b60408201600082015161042560008501826103ac565b50602082015161043860208501826103ac565b50505050565b6000602082019050818103600083015261045881846103bb565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561048357600080fd5b8060405250919050565b600067ffffffffffffffff8211156104a457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156104cc57600080fd5b602082029050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b60008190509190505600a265627a7a7230582011dc176b6cffda1d2e58827bca1a16178776c2d8efcd6adf48bc0223f14f891a6c6578706572696d656e74616cf50037"  # noqa: E501
CONTRACT_NESTED_TUPLE_ABI = json.loads(
    '[{"constant":true,"inputs":[{"components":[{"components":[{"components":[{"name":"x","type":"int256"},{"name":"y","type":"int256"}],"name":"u","type":"tuple[]"}],"name":"t","type":"tuple[]"}],"name":"s","type":"tuple"}],"name":"method","outputs":[{"components":[{"components":[{"components":[{"name":"x","type":"int256"},{"name":"y","type":"int256"}],"name":"u","type":"tuple[]"}],"name":"t","type":"tuple[]"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"pure","type":"function"}]'  # noqa: E501
)


@pytest.fixture()
def NESTED_TUPLE_CODE():
    return CONTRACT_NESTED_TUPLE_CODE


@pytest.fixture()
def NESTED_TUPLE_RUNTIME():
    return CONTRACT_NESTED_TUPLE_RUNTIME


@pytest.fixture()
def NESTED_TUPLE_ABI():
    return CONTRACT_NESTED_TUPLE_ABI


@pytest.fixture()
def NESTED_TUPLE_CONTRACT(NESTED_TUPLE_CODE, NESTED_TUPLE_RUNTIME, NESTED_TUPLE_ABI):
    return {
        "bytecode": NESTED_TUPLE_CODE,
        "bytecode_runtime": NESTED_TUPLE_RUNTIME,
        "abi": NESTED_TUPLE_ABI,
    }


@pytest.fixture()
def NestedTupleContract(w3, NESTED_TUPLE_CONTRACT):
    return w3.eth.contract(**NESTED_TUPLE_CONTRACT)


CONTRACT_TUPLE_SOURCE = """
pragma solidity >=0.4.19 <0.6.0;
pragma experimental ABIEncoderV2;

contract Tuple {
    struct T { int x; bool[2] y; address[] z; }
    struct S { uint a; uint[] b; T[] c; }

    function method(S memory s) public pure returns (S memory) {
        return s;
    }
}
"""
CONTRACT_TUPLE_CODE = "0x608060405234801561001057600080fd5b506108ca806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638e1ae3c714610046575b600080fd5b34801561005257600080fd5b5061006d60048036036100689190810190610403565b610083565b60405161007a9190610696565b60405180910390f35b61008b610093565b819050919050565b6060604051908101604052806000815260200160608152602001606081525090565b60006100c18235610850565b905092915050565b600082601f83011215156100dc57600080fd5b81356100ef6100ea826106e5565b6106b8565b9150818183526020840193506020810190508385602084028201111561011457600080fd5b60005b83811015610144578161012a88826100b5565b845260208401935060208301925050600181019050610117565b5050505092915050565b600082601f830112151561016157600080fd5b600261017461016f8261070d565b6106b8565b9150818385602084028201111561018a57600080fd5b60005b838110156101ba57816101a088826102bf565b84526020840193506020830192505060018101905061018d565b5050505092915050565b600082601f83011215156101d757600080fd5b81356101ea6101e58261072f565b6106b8565b9150818183526020840193506020810190508360005b8381101561023057813586016102168882610377565b845260208401935060208301925050600181019050610200565b5050505092915050565b600082601f830112151561024d57600080fd5b813561026061025b82610757565b6106b8565b9150818183526020840193506020810190508385602084028201111561028557600080fd5b60005b838110156102b5578161029b88826103ef565b845260208401935060208301925050600181019050610288565b5050505092915050565b60006102cb8235610870565b905092915050565b60006102df823561087c565b905092915050565b6000606082840312156102f957600080fd5b61030360606106b8565b90506000610313848285016103ef565b600083015250602082013567ffffffffffffffff81111561033357600080fd5b61033f8482850161023a565b602083015250604082013567ffffffffffffffff81111561035f57600080fd5b61036b848285016101c4565b60408301525092915050565b60006080828403121561038957600080fd5b61039360606106b8565b905060006103a3848285016102d3565b60008301525060206103b78482850161014e565b602083015250606082013567ffffffffffffffff8111156103d757600080fd5b6103e3848285016100c9565b60408301525092915050565b60006103fb8235610886565b905092915050565b60006020828403121561041557600080fd5b600082013567ffffffffffffffff81111561042f57600080fd5b61043b848285016102e7565b91505092915050565b61044d81610810565b82525050565b600061045e826107b0565b8084526020840193506104708361077f565b60005b828110156104a257610486868351610444565b61048f826107dc565b9150602086019550600181019050610473565b50849250505092915050565b6104b7816107bb565b6104c08261078c565b60005b828110156104f2576104d68583516105c2565b6104df826107e9565b91506020850194506001810190506104c3565b5050505050565b6000610504826107c6565b8084526020840193508360208202850161051d85610796565b60005b84811015610556578383038852610538838351610637565b9250610543826107f6565b9150602088019750600181019050610520565b508196508694505050505092915050565b6000610572826107d1565b808452602084019350610584836107a3565b60005b828110156105b65761059a868351610687565b6105a382610803565b9150602086019550600181019050610587565b50849250505092915050565b6105cb81610830565b82525050565b6105da8161083c565b82525050565b60006060830160008301516105f86000860182610687565b50602083015184820360208601526106108282610567565b9150506040830151848203604086015261062a82826104f9565b9150508091505092915050565b600060808301600083015161064f60008601826105d1565b50602083015161066260208601826104ae565b506040830151848203606086015261067a8282610453565b9150508091505092915050565b61069081610846565b82525050565b600060208201905081810360008301526106b081846105e0565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156106db57600080fd5b8060405250919050565b600067ffffffffffffffff8211156106fc57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561072457600080fd5b602082029050919050565b600067ffffffffffffffff82111561074657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561076e57600080fd5b602082029050602081019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600060029050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b60008190509190505600a265627a7a72305820fb4abae14c4bcd2cd8a12f35862cb09a2e0f9004eb5fdbfdb76658a753570c8c6c6578706572696d656e74616cf50037"  # noqa: E501
CONTRACT_TUPLE_RUNTIME = "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638e1ae3c714610046575b600080fd5b34801561005257600080fd5b5061006d60048036036100689190810190610403565b610083565b60405161007a9190610696565b60405180910390f35b61008b610093565b819050919050565b6060604051908101604052806000815260200160608152602001606081525090565b60006100c18235610850565b905092915050565b600082601f83011215156100dc57600080fd5b81356100ef6100ea826106e5565b6106b8565b9150818183526020840193506020810190508385602084028201111561011457600080fd5b60005b83811015610144578161012a88826100b5565b845260208401935060208301925050600181019050610117565b5050505092915050565b600082601f830112151561016157600080fd5b600261017461016f8261070d565b6106b8565b9150818385602084028201111561018a57600080fd5b60005b838110156101ba57816101a088826102bf565b84526020840193506020830192505060018101905061018d565b5050505092915050565b600082601f83011215156101d757600080fd5b81356101ea6101e58261072f565b6106b8565b9150818183526020840193506020810190508360005b8381101561023057813586016102168882610377565b845260208401935060208301925050600181019050610200565b5050505092915050565b600082601f830112151561024d57600080fd5b813561026061025b82610757565b6106b8565b9150818183526020840193506020810190508385602084028201111561028557600080fd5b60005b838110156102b5578161029b88826103ef565b845260208401935060208301925050600181019050610288565b5050505092915050565b60006102cb8235610870565b905092915050565b60006102df823561087c565b905092915050565b6000606082840312156102f957600080fd5b61030360606106b8565b90506000610313848285016103ef565b600083015250602082013567ffffffffffffffff81111561033357600080fd5b61033f8482850161023a565b602083015250604082013567ffffffffffffffff81111561035f57600080fd5b61036b848285016101c4565b60408301525092915050565b60006080828403121561038957600080fd5b61039360606106b8565b905060006103a3848285016102d3565b60008301525060206103b78482850161014e565b602083015250606082013567ffffffffffffffff8111156103d757600080fd5b6103e3848285016100c9565b60408301525092915050565b60006103fb8235610886565b905092915050565b60006020828403121561041557600080fd5b600082013567ffffffffffffffff81111561042f57600080fd5b61043b848285016102e7565b91505092915050565b61044d81610810565b82525050565b600061045e826107b0565b8084526020840193506104708361077f565b60005b828110156104a257610486868351610444565b61048f826107dc565b9150602086019550600181019050610473565b50849250505092915050565b6104b7816107bb565b6104c08261078c565b60005b828110156104f2576104d68583516105c2565b6104df826107e9565b91506020850194506001810190506104c3565b5050505050565b6000610504826107c6565b8084526020840193508360208202850161051d85610796565b60005b84811015610556578383038852610538838351610637565b9250610543826107f6565b9150602088019750600181019050610520565b508196508694505050505092915050565b6000610572826107d1565b808452602084019350610584836107a3565b60005b828110156105b65761059a868351610687565b6105a382610803565b9150602086019550600181019050610587565b50849250505092915050565b6105cb81610830565b82525050565b6105da8161083c565b82525050565b60006060830160008301516105f86000860182610687565b50602083015184820360208601526106108282610567565b9150506040830151848203604086015261062a82826104f9565b9150508091505092915050565b600060808301600083015161064f60008601826105d1565b50602083015161066260208601826104ae565b506040830151848203606086015261067a8282610453565b9150508091505092915050565b61069081610846565b82525050565b600060208201905081810360008301526106b081846105e0565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156106db57600080fd5b8060405250919050565b600067ffffffffffffffff8211156106fc57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561072457600080fd5b602082029050919050565b600067ffffffffffffffff82111561074657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561076e57600080fd5b602082029050602081019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600060029050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b60008190509190505600a265627a7a72305820fb4abae14c4bcd2cd8a12f35862cb09a2e0f9004eb5fdbfdb76658a753570c8c6c6578706572696d656e74616cf50037"  # noqa: E501
CONTRACT_TUPLE_ABI = json.loads(
    '[{"constant":true,"inputs":[{"components":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256[]"},{"components":[{"name":"x","type":"int256"},{"name":"y","type":"bool[2]"},{"name":"z","type":"address[]"}],"name":"c","type":"tuple[]"}],"name":"s","type":"tuple"}],"name":"method","outputs":[{"components":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256[]"},{"components":[{"name":"x","type":"int256"},{"name":"y","type":"bool[2]"},{"name":"z","type":"address[]"}],"name":"c","type":"tuple[]"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"pure","type":"function"}]'  # noqa: E501
)


@pytest.fixture()
def TUPLE_CODE():
    return CONTRACT_TUPLE_CODE


@pytest.fixture()
def TUPLE_RUNTIME():
    return CONTRACT_TUPLE_RUNTIME


@pytest.fixture()
def TUPLE_ABI():
    return CONTRACT_TUPLE_ABI


@pytest.fixture()
def TUPLE_CONTRACT(TUPLE_CODE, TUPLE_RUNTIME, TUPLE_ABI):
    return {
        "bytecode": TUPLE_CODE,
        "bytecode_runtime": TUPLE_RUNTIME,
        "abi": TUPLE_ABI,
    }


@pytest.fixture()
def TupleContract(w3, TUPLE_CONTRACT):
    return w3.eth.contract(**TUPLE_CONTRACT)


# source: web3/_utils/contract_sources/MathContract.sol
# compiled with Solidity 0.8.17
MATH_CONTRACT_CODE = "0x60806040526000805534801561001457600080fd5b5061055b806100246000396000f3fe6080604052600436106100555760003560e01c806316216f391461005a5780635b34b9661461008557806361bc221a146100a35780636abbb3b4146100ce578063a5f3c23b146100fe578063dcf537b11461012e575b600080fd5b34801561006657600080fd5b5061006f61015e565b60405161007c9190610260565b60405180910390f35b61008d610167565b60405161009a9190610294565b60405180910390f35b3480156100af57600080fd5b506100b86101be565b6040516100c59190610294565b60405180910390f35b6100e860048036038101906100e391906102e0565b6101c4565b6040516100f59190610294565b60405180910390f35b61011860048036038101906101139190610339565b61021b565b6040516101259190610260565b60405180910390f35b61014860048036038101906101439190610379565b610231565b6040516101559190610260565b60405180910390f35b6000600d905090565b6000600160005461017891906103d5565b6000819055507f3496c3ede4ec3ab3686712aa1c238593ea6a42df83f98a5ec7df9834cfa577c560016040516101ae919061044e565b60405180910390a1600054905090565b60005481565b6000816000546101d491906103d5565b6000819055507f3496c3ede4ec3ab3686712aa1c238593ea6a42df83f98a5ec7df9834cfa577c5826040516102099190610294565b60405180910390a16000549050919050565b600081836102299190610469565b905092915050565b600060078261024091906104ad565b9050919050565b6000819050919050565b61025a81610247565b82525050565b60006020820190506102756000830184610251565b92915050565b6000819050919050565b61028e8161027b565b82525050565b60006020820190506102a96000830184610285565b92915050565b600080fd5b6102bd8161027b565b81146102c857600080fd5b50565b6000813590506102da816102b4565b92915050565b6000602082840312156102f6576102f56102af565b5b6000610304848285016102cb565b91505092915050565b61031681610247565b811461032157600080fd5b50565b6000813590506103338161030d565b92915050565b600080604083850312156103505761034f6102af565b5b600061035e85828601610324565b925050602061036f85828601610324565b9150509250929050565b60006020828403121561038f5761038e6102af565b5b600061039d84828501610324565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006103e08261027b565b91506103eb8361027b565b9250828201905080821115610403576104026103a6565b5b92915050565b6000819050919050565b6000819050919050565b600061043861043361042e84610409565b610413565b61027b565b9050919050565b6104488161041d565b82525050565b6000602082019050610463600083018461043f565b92915050565b600061047482610247565b915061047f83610247565b9250828201905082811215600083121683821260008412151617156104a7576104a66103a6565b5b92915050565b60006104b882610247565b91506104c383610247565b92508282026104d181610247565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610509576105086103a6565b5b828205841483151761051e5761051d6103a6565b5b509291505056fea2646970667358221220607cd99eabba12e9d39e526a2c5ee82f4af77472608174275cd751b1d4bc047164736f6c63430008110033"  # noqa: E501
MATH_CONTRACT_RUNTIME = "0x6080604052600436106100555760003560e01c806316216f391461005a5780635b34b9661461008557806361bc221a146100a35780636abbb3b4146100ce578063a5f3c23b146100fe578063dcf537b11461012e575b600080fd5b34801561006657600080fd5b5061006f61015e565b60405161007c9190610260565b60405180910390f35b61008d610167565b60405161009a9190610294565b60405180910390f35b3480156100af57600080fd5b506100b86101be565b6040516100c59190610294565b60405180910390f35b6100e860048036038101906100e391906102e0565b6101c4565b6040516100f59190610294565b60405180910390f35b61011860048036038101906101139190610339565b61021b565b6040516101259190610260565b60405180910390f35b61014860048036038101906101439190610379565b610231565b6040516101559190610260565b60405180910390f35b6000600d905090565b6000600160005461017891906103d5565b6000819055507f3496c3ede4ec3ab3686712aa1c238593ea6a42df83f98a5ec7df9834cfa577c560016040516101ae919061044e565b60405180910390a1600054905090565b60005481565b6000816000546101d491906103d5565b6000819055507f3496c3ede4ec3ab3686712aa1c238593ea6a42df83f98a5ec7df9834cfa577c5826040516102099190610294565b60405180910390a16000549050919050565b600081836102299190610469565b905092915050565b600060078261024091906104ad565b9050919050565b6000819050919050565b61025a81610247565b82525050565b60006020820190506102756000830184610251565b92915050565b6000819050919050565b61028e8161027b565b82525050565b60006020820190506102a96000830184610285565b92915050565b600080fd5b6102bd8161027b565b81146102c857600080fd5b50565b6000813590506102da816102b4565b92915050565b6000602082840312156102f6576102f56102af565b5b6000610304848285016102cb565b91505092915050565b61031681610247565b811461032157600080fd5b50565b6000813590506103338161030d565b92915050565b600080604083850312156103505761034f6102af565b5b600061035e85828601610324565b925050602061036f85828601610324565b9150509250929050565b60006020828403121561038f5761038e6102af565b5b600061039d84828501610324565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006103e08261027b565b91506103eb8361027b565b9250828201905080821115610403576104026103a6565b5b92915050565b6000819050919050565b6000819050919050565b600061043861043361042e84610409565b610413565b61027b565b9050919050565b6104488161041d565b82525050565b6000602082019050610463600083018461043f565b92915050565b600061047482610247565b915061047f83610247565b9250828201905082811215600083121683821260008412151617156104a7576104a66103a6565b5b92915050565b60006104b882610247565b91506104c383610247565b92508282026104d181610247565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610509576105086103a6565b5b828205841483151761051e5761051d6103a6565b5b509291505056fea2646970667358221220607cd99eabba12e9d39e526a2c5ee82f4af77472608174275cd751b1d4bc047164736f6c63430008110033"  # noqa: E501
MATH_CONTRACT_ABI = json.loads(
    '[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Increased","type":"event"},{"inputs":[{"internalType":"int256","name":"a","type":"int256"},{"internalType":"int256","name":"b","type":"int256"}],"name":"add","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"counter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"incrementCounter","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"incrementCounter","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"int256","name":"a","type":"int256"}],"name":"multiply7","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"return13","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"stateMutability":"nonpayable","type":"function"}]'  # noqa: E501
)


@pytest.fixture(scope="session")
def math_contract_bytecode():
    return MATH_CONTRACT_CODE


@pytest.fixture(scope="session")
def math_contract_runtime():
    return MATH_CONTRACT_RUNTIME


@pytest.fixture(scope="session")
def math_contract_abi():
    return MATH_CONTRACT_ABI


@pytest.fixture()
def math_contract_instance(
    w3, math_contract_abi, math_contract_bytecode, math_contract_runtime
):
    return w3.eth.contract(
        abi=math_contract_abi,
        bytecode=math_contract_bytecode,
        bytecode_runtime=math_contract_runtime,
    )


@pytest.fixture()
def math_contract(w3, math_contract_instance, address_conversion_func):
    return deploy(w3, math_contract_instance, address_conversion_func)


# source: web3/_utils/contract_sources/ConstructorContracts.sol:SimpleConstructor
# compiled with Solidity 0.8.17
SIMPLE_CONSTRUCTOR_BYTECODE = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122034ed61fab7939a9b4f373acbbdb1df0be80fb7f7ffb35d8b25d6e4deff947b4d64736f6c63430008110033"  # noqa: E501
SIMPLE_CONSTRUCTOR_RUNTIME = "0x6080604052600080fdfea264697066735822122034ed61fab7939a9b4f373acbbdb1df0be80fb7f7ffb35d8b25d6e4deff947b4d64736f6c63430008110033"  # noqa: E501
SIMPLE_CONSTRUCTOR_ABI = json.loads('[{"inputs":[],"type":"constructor"}]')


@pytest.fixture(scope="session")
def simple_constructor_contract_bytecode():
    return SIMPLE_CONSTRUCTOR_BYTECODE


@pytest.fixture(scope="session")
def simple_constructor_contract_runtime():
    return SIMPLE_CONSTRUCTOR_RUNTIME


@pytest.fixture(scope="session")
def simple_constructor_contract_abi():
    return SIMPLE_CONSTRUCTOR_ABI


@pytest.fixture()
def simple_constructor_contract_instance(
    w3,
    simple_constructor_contract_bytecode,
    simple_constructor_contract_runtime,
    simple_constructor_contract_abi,
):
    return w3.eth.contract(
        abi=simple_constructor_contract_abi,
        bytecode=simple_constructor_contract_bytecode,
        bytecode_runtime=simple_constructor_contract_runtime,
    )


# source: web3/_utils/contract_sources/ConstructorContracts.sol:ConstructorWithArguments
# compiled with Solidity 0.8.17
CONTRACT_WITH_CONSTRUCTOR_ARGS_BYTECODE = "0x608060405234801561001057600080fd5b50604051610214380380610214833981810160405281019061003291906100b8565b816000819055508060018190555050506100f8565b600080fd5b6000819050919050565b61005f8161004c565b811461006a57600080fd5b50565b60008151905061007c81610056565b92915050565b6000819050919050565b61009581610082565b81146100a057600080fd5b50565b6000815190506100b28161008c565b92915050565b600080604083850312156100cf576100ce610047565b5b60006100dd8582860161006d565b92505060206100ee858286016100a3565b9150509250929050565b61010d806101076000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806388ec1346146037578063d4c46c76146051575b600080fd5b603d606b565b60405160489190608e565b60405180910390f35b60576071565b6040516062919060be565b60405180910390f35b60005481565b60015481565b6000819050919050565b6088816077565b82525050565b600060208201905060a160008301846081565b92915050565b6000819050919050565b60b88160a7565b82525050565b600060208201905060d1600083018460b1565b9291505056fea264697066735822122035bd964aa6a147f69a8ae5b1fd3a4f2994de267d538a55ec4252b912b39cbb5064736f6c63430008110033"  # noqa: E501
CONTRACT_WITH_CONSTRUCTOR_ARGS_RUNTIME = "0x6080604052348015600f57600080fd5b506004361060325760003560e01c806388ec1346146037578063d4c46c76146051575b600080fd5b603d606b565b60405160489190608e565b60405180910390f35b60576071565b6040516062919060be565b60405180910390f35b60005481565b60015481565b6000819050919050565b6088816077565b82525050565b600060208201905060a160008301846081565b92915050565b6000819050919050565b60b88160a7565b82525050565b600060208201905060d1600083018460b1565b9291505056fea264697066735822122035bd964aa6a147f69a8ae5b1fd3a4f2994de267d538a55ec4252b912b39cbb5064736f6c63430008110033"  # noqa: E501
CONTRACT_WITH_CONSTRUCTOR_ARGS_ABI = json.loads(
    '[{"inputs":[{"internalType":"uint256","name":"a","type":"uint256"},{"internalType":"bytes32","name":"b","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"data_a","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"data_b","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}]'  # noqa: E501
)


@pytest.fixture()
def contract_with_constructor_args_bytecode():
    return CONTRACT_WITH_CONSTRUCTOR_ARGS_BYTECODE


@pytest.fixture()
def contract_with_constructor_args_runtime():
    return CONTRACT_WITH_CONSTRUCTOR_ARGS_RUNTIME


@pytest.fixture()
def contract_with_constructor_args_abi():
    return CONTRACT_WITH_CONSTRUCTOR_ARGS_ABI


@pytest.fixture()
def contract_with_constructor_args_instance(
    w3,
    contract_with_constructor_args_bytecode,
    contract_with_constructor_args_runtime,
    contract_with_constructor_args_abi,
):
    return w3.eth.contract(
        abi=contract_with_constructor_args_abi,
        bytecode=contract_with_constructor_args_bytecode,
        bytecode_runtime=contract_with_constructor_args_runtime,
    )


@pytest.fixture
def non_strict_contract_with_constructor_args_instance(
    w3_non_strict_abi,
    contract_with_constructor_args_bytecode,
    contract_with_constructor_args_runtime,
    contract_with_constructor_args_abi,
):
    return w3_non_strict_abi.eth.contract(
        abi=contract_with_constructor_args_abi,
        bytecode=contract_with_constructor_args_bytecode,
        bytecode_runtime=contract_with_constructor_args_runtime,
    )


# source: web3/_utils/contract_sources/ConstructorContracts.sol:ConstructorWithAddressArgument  # noqa: E501
# compiled with Solidity 0.8.17
CONTRACT_WITH_CONSTRUCTOR_ADDRESS_BYTECODE = "0x608060405234801561001057600080fd5b5060405161020d38038061020d833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b60f7806101166000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806334664e3a14602d575b600080fd5b60336047565b604051603e919060a8565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000609482606b565b9050919050565b60a281608b565b82525050565b600060208201905060bb6000830184609b565b9291505056fea2646970667358221220405a81c137def72f9de1e09c28e163d7f76ed721346c9d7c7761c6d923dfcb9364736f6c63430008110033"  # noqa: E501
CONTRACT_WITH_CONSTRUCTOR_ADDRESS_RUNTIME = "0x6080604052348015600f57600080fd5b506004361060285760003560e01c806334664e3a14602d575b600080fd5b60336047565b604051603e919060a8565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000609482606b565b9050919050565b60a281608b565b82525050565b600060208201905060bb6000830184609b565b9291505056fea2646970667358221220405a81c137def72f9de1e09c28e163d7f76ed721346c9d7c7761c6d923dfcb9364736f6c63430008110033"  # noqa: E501
CONTRACT_WITH_CONSTRUCTOR_ADDRESS_ABI = json.loads(
    '[{"inputs":[{"internalType":"address","name":"_testAddr","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"testAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]'  # noqa: E501
)


@pytest.fixture
def contract_with_constructor_address_bytecode():
    return CONTRACT_WITH_CONSTRUCTOR_ADDRESS_BYTECODE


@pytest.fixture
def contract_with_constructor_address_runtime():
    return CONTRACT_WITH_CONSTRUCTOR_ADDRESS_RUNTIME


@pytest.fixture
def contract_with_constructor_address_abi():
    return CONTRACT_WITH_CONSTRUCTOR_ADDRESS_ABI


@pytest.fixture
def contract_with_constructor_address_instance(
    w3,
    contract_with_constructor_address_bytecode,
    contract_with_constructor_address_runtime,
    contract_with_constructor_address_abi,
):
    return w3.eth.contract(
        abi=contract_with_constructor_address_abi,
        bytecode=contract_with_constructor_address_bytecode,
        bytecode_runtime=contract_with_constructor_address_runtime,
    )


@pytest.fixture
def contract_with_constructor_address(
    w3, contract_with_constructor_address_instance, address_conversion_func
):
    return deploy(
        w3,
        contract_with_constructor_address_instance,
        address_conversion_func,
        args=["0xd3CdA913deB6f67967B99D67aCDFa1712C293601"],
    )


# source: web3/_utils/contract_sources/AddressReflector.sol:AddressReflector
# compiled with Solidity 0.8.17
ADDRESS_REFLECTOR_CONTRACT_BYTECODE = "0x608060405234801561001057600080fd5b50610430806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630b816c161461003b578063c04d11fc1461006b575b600080fd5b61005560048036038101906100509190610121565b61009b565b604051610062919061015d565b60405180910390f35b610085600480360381019061008091906102d1565b6100a5565b60405161009291906103d8565b60405180910390f35b6000819050919050565b6060819050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ee826100c3565b9050919050565b6100fe816100e3565b811461010957600080fd5b50565b60008135905061011b816100f5565b92915050565b600060208284031215610137576101366100b9565b5b60006101458482850161010c565b91505092915050565b610157816100e3565b82525050565b6000602082019050610172600083018461014e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101c68261017d565b810181811067ffffffffffffffff821117156101e5576101e461018e565b5b80604052505050565b60006101f86100af565b905061020482826101bd565b919050565b600067ffffffffffffffff8211156102245761022361018e565b5b602082029050602081019050919050565b600080fd5b600061024d61024884610209565b6101ee565b905080838252602082019050602084028301858111156102705761026f610235565b5b835b818110156102995780610285888261010c565b845260208401935050602081019050610272565b5050509392505050565b600082601f8301126102b8576102b7610178565b5b81356102c884826020860161023a565b91505092915050565b6000602082840312156102e7576102e66100b9565b5b600082013567ffffffffffffffff811115610305576103046100be565b5b610311848285016102a3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61034f816100e3565b82525050565b60006103618383610346565b60208301905092915050565b6000602082019050919050565b60006103858261031a565b61038f8185610325565b935061039a83610336565b8060005b838110156103cb5781516103b28882610355565b97506103bd8361036d565b92505060018101905061039e565b5085935050505092915050565b600060208201905081810360008301526103f2818461037a565b90509291505056fea2646970667358221220371edff19873fdfb0d5f8053a775ef099ccb159b5f09b58d9f0efaf186cbda4e64736f6c63430008110033"  # noqa: 501
ADDRESS_REFLECTOR_CONTRACT_RUNTIME = "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80630b816c161461003b578063c04d11fc1461006b575b600080fd5b61005560048036038101906100509190610121565b61009b565b604051610062919061015d565b60405180910390f35b610085600480360381019061008091906102d1565b6100a5565b60405161009291906103d8565b60405180910390f35b6000819050919050565b6060819050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ee826100c3565b9050919050565b6100fe816100e3565b811461010957600080fd5b50565b60008135905061011b816100f5565b92915050565b600060208284031215610137576101366100b9565b5b60006101458482850161010c565b91505092915050565b610157816100e3565b82525050565b6000602082019050610172600083018461014e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101c68261017d565b810181811067ffffffffffffffff821117156101e5576101e461018e565b5b80604052505050565b60006101f86100af565b905061020482826101bd565b919050565b600067ffffffffffffffff8211156102245761022361018e565b5b602082029050602081019050919050565b600080fd5b600061024d61024884610209565b6101ee565b905080838252602082019050602084028301858111156102705761026f610235565b5b835b818110156102995780610285888261010c565b845260208401935050602081019050610272565b5050509392505050565b600082601f8301126102b8576102b7610178565b5b81356102c884826020860161023a565b91505092915050565b6000602082840312156102e7576102e66100b9565b5b600082013567ffffffffffffffff811115610305576103046100be565b5b610311848285016102a3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61034f816100e3565b82525050565b60006103618383610346565b60208301905092915050565b6000602082019050919050565b60006103858261031a565b61038f8185610325565b935061039a83610336565b8060005b838110156103cb5781516103b28882610355565b97506103bd8361036d565b92505060018101905061039e565b5085935050505092915050565b600060208201905081810360008301526103f2818461037a565b90509291505056fea2646970667358221220371edff19873fdfb0d5f8053a775ef099ccb159b5f09b58d9f0efaf186cbda4e64736f6c63430008110033"  # noqa: 501
ADDRESS_REFLECTOR_CONTRACT_ABI = json.loads(
    '[{"inputs":[{"internalType":"address","name":"arg","type":"address"}],"name":"reflect","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address[]","name":"arg","type":"address[]"}],"name":"reflect","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"pure","type":"function"}]'  # noqa: 501
)


@pytest.fixture
def address_reflector_contract_instance(w3):
    return w3.eth.contract(
        abi=ADDRESS_REFLECTOR_CONTRACT_ABI,
        bytecode=ADDRESS_REFLECTOR_CONTRACT_BYTECODE,
        bytecode_runtime=ADDRESS_REFLECTOR_CONTRACT_RUNTIME,
    )


@pytest.fixture
def address_reflector_contract(
    w3, address_reflector_contract_instance, address_conversion_func
):
    return deploy(w3, address_reflector_contract_instance, address_conversion_func)


STRING_CONTRACT_BYTECODE = "0x60806040526040518060400160405280600a81526020017f6e65766572207573656400000000000000000000000000000000000000000000815250600090816200004a919062000311565b503480156200005857600080fd5b5060405162000cf438038062000cf483398181016040528101906200007e91906200055c565b80600190816200008f919062000311565b5050620005ad565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200011957607f821691505b6020821081036200012f576200012e620000d1565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200015a565b620001a586836200015a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001f2620001ec620001e684620001bd565b620001c7565b620001bd565b9050919050565b6000819050919050565b6200020e83620001d1565b620002266200021d82620001f9565b84845462000167565b825550505050565b600090565b6200023d6200022e565b6200024a81848462000203565b505050565b5b8181101562000272576200026660008262000233565b60018101905062000250565b5050565b601f821115620002c1576200028b8162000135565b62000296846200014a565b81016020851015620002a6578190505b620002be620002b5856200014a565b8301826200024f565b50505b505050565b600082821c905092915050565b6000620002e660001984600802620002c6565b1980831691505092915050565b6000620003018383620002d3565b9150826002028217905092915050565b6200031c8262000097565b67ffffffffffffffff811115620003385762000337620000a2565b5b62000344825462000100565b6200035182828562000276565b600060209050601f83116001811462000389576000841562000374578287015190505b620003808582620002f3565b865550620003f0565b601f198416620003998662000135565b60005b82811015620003c3578489015182556001820191506020850194506020810190506200039c565b86831015620003e35784890151620003df601f891682620002d3565b8355505b6001600288020188555050505b505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620004328262000416565b810181811067ffffffffffffffff82111715620004545762000453620000a2565b5b80604052505050565b600062000469620003f8565b905062000477828262000427565b919050565b600067ffffffffffffffff8211156200049a5762000499620000a2565b5b620004a58262000416565b9050602081019050919050565b60005b83811015620004d2578082015181840152602081019050620004b5565b60008484015250505050565b6000620004f5620004ef846200047c565b6200045d565b90508281526020810184848401111562000514576200051362000411565b5b62000521848285620004b2565b509392505050565b600082601f8301126200054157620005406200040c565b5b815162000553848260208601620004de565b91505092915050565b60006020828403121562000575576200057462000402565b5b600082015167ffffffffffffffff81111562000596576200059562000407565b5b620005a48482850162000529565b91505092915050565b61073780620005bd6000396000f3fe6080604052600436106100345760003560e01c8063209652551461003957806330de3cee1461005757806393a0935214610075575b600080fd5b61004161009e565b60405161004e9190610265565b60405180910390f35b61005f610130565b60405161006c9190610265565b60405180910390f35b34801561008157600080fd5b5061009c600480360381019061009791906103d0565b6101c2565b005b6060600180546100ad90610448565b80601f01602080910402602001604051908101604052809291908181526020018280546100d990610448565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b5050505050905090565b60606000805461013f90610448565b80601f016020809104026020016040519081016040528092919081815260200182805461016b90610448565b80156101b85780601f1061018d576101008083540402835291602001916101b8565b820191906000526020600020905b81548152906001019060200180831161019b57829003601f168201915b5050505050905090565b80600190816101d1919061062f565b5050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561020f5780820151818401526020810190506101f4565b60008484015250505050565b6000601f19601f8301169050919050565b6000610237826101d5565b61024181856101e0565b93506102518185602086016101f1565b61025a8161021b565b840191505092915050565b6000602082019050818103600083015261027f818461022c565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102dd8261021b565b810181811067ffffffffffffffff821117156102fc576102fb6102a5565b5b80604052505050565b600061030f610287565b905061031b82826102d4565b919050565b600067ffffffffffffffff82111561033b5761033a6102a5565b5b6103448261021b565b9050602081019050919050565b82818337600083830152505050565b600061037361036e84610320565b610305565b90508281526020810184848401111561038f5761038e6102a0565b5b61039a848285610351565b509392505050565b600082601f8301126103b7576103b661029b565b5b81356103c7848260208601610360565b91505092915050565b6000602082840312156103e6576103e5610291565b5b600082013567ffffffffffffffff81111561040457610403610296565b5b610410848285016103a2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061046057607f821691505b60208210810361047357610472610419565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261049e565b6104e5868361049e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061052c610527610522846104fd565b610507565b6104fd565b9050919050565b6000819050919050565b61054683610511565b61055a61055282610533565b8484546104ab565b825550505050565b600090565b61056f610562565b61057a81848461053d565b505050565b5b8181101561059e57610593600082610567565b600181019050610580565b5050565b601f8211156105e3576105b481610479565b6105bd8461048e565b810160208510156105cc578190505b6105e06105d88561048e565b83018261057f565b50505b505050565b600082821c905092915050565b6000610606600019846008026105e8565b1980831691505092915050565b600061061f83836105f5565b9150826002028217905092915050565b610638826101d5565b67ffffffffffffffff811115610651576106506102a5565b5b61065b8254610448565b6106668282856105a2565b600060209050601f8311600181146106995760008415610687578287015190505b6106918582610613565b8655506106f9565b601f1984166106a786610479565b60005b828110156106cf578489015182556001820191506020850194506020810190506106aa565b868310156106ec57848901516106e8601f8916826105f5565b8355505b6001600288020188555050505b50505050505056fea264697066735822122070af6b54814b3ca66e79200ccc07de707e984422ec598e78cbbd7ed6f8671feb64736f6c63430008110033"  # noqa: E501
STRING_CONTRACT_RUNTIME = "0x6080604052600436106100345760003560e01c8063209652551461003957806330de3cee1461005757806393a0935214610075575b600080fd5b61004161009e565b60405161004e9190610265565b60405180910390f35b61005f610130565b60405161006c9190610265565b60405180910390f35b34801561008157600080fd5b5061009c600480360381019061009791906103d0565b6101c2565b005b6060600180546100ad90610448565b80601f01602080910402602001604051908101604052809291908181526020018280546100d990610448565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b5050505050905090565b60606000805461013f90610448565b80601f016020809104026020016040519081016040528092919081815260200182805461016b90610448565b80156101b85780601f1061018d576101008083540402835291602001916101b8565b820191906000526020600020905b81548152906001019060200180831161019b57829003601f168201915b5050505050905090565b80600190816101d1919061062f565b5050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561020f5780820151818401526020810190506101f4565b60008484015250505050565b6000601f19601f8301169050919050565b6000610237826101d5565b61024181856101e0565b93506102518185602086016101f1565b61025a8161021b565b840191505092915050565b6000602082019050818103600083015261027f818461022c565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102dd8261021b565b810181811067ffffffffffffffff821117156102fc576102fb6102a5565b5b80604052505050565b600061030f610287565b905061031b82826102d4565b919050565b600067ffffffffffffffff82111561033b5761033a6102a5565b5b6103448261021b565b9050602081019050919050565b82818337600083830152505050565b600061037361036e84610320565b610305565b90508281526020810184848401111561038f5761038e6102a0565b5b61039a848285610351565b509392505050565b600082601f8301126103b7576103b661029b565b5b81356103c7848260208601610360565b91505092915050565b6000602082840312156103e6576103e5610291565b5b600082013567ffffffffffffffff81111561040457610403610296565b5b610410848285016103a2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061046057607f821691505b60208210810361047357610472610419565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261049e565b6104e5868361049e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061052c610527610522846104fd565b610507565b6104fd565b9050919050565b6000819050919050565b61054683610511565b61055a61055282610533565b8484546104ab565b825550505050565b600090565b61056f610562565b61057a81848461053d565b505050565b5b8181101561059e57610593600082610567565b600181019050610580565b5050565b601f8211156105e3576105b481610479565b6105bd8461048e565b810160208510156105cc578190505b6105e06105d88561048e565b83018261057f565b50505b505050565b600082821c905092915050565b6000610606600019846008026105e8565b1980831691505092915050565b600061061f83836105f5565b9150826002028217905092915050565b610638826101d5565b67ffffffffffffffff811115610651576106506102a5565b5b61065b8254610448565b6106668282856105a2565b600060209050601f8311600181146106995760008415610687578287015190505b6106918582610613565b8655506106f9565b601f1984166106a786610479565b60005b828110156106cf578489015182556001820191506020850194506020810190506106aa565b868310156106ec57848901516106e8601f8916826105f5565b8355505b6001600288020188555050505b50505050505056fea264697066735822122070af6b54814b3ca66e79200ccc07de707e984422ec598e78cbbd7ed6f8671feb64736f6c63430008110033"  # noqa: E501
STRING_CONTRACT_ABI = json.loads(
    '[{"inputs":[{"internalType":"string","name":"_value","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"constValue","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getValue","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"_value","type":"string"}],"name":"setValue","outputs":[],"stateMutability":"nonpayable","type":"function"}]'  # noqa: E501
)


@pytest.fixture
def string_contract_bytecode():
    return STRING_CONTRACT_BYTECODE


@pytest.fixture
def string_contract_runtime():
    return STRING_CONTRACT_RUNTIME


@pytest.fixture
def string_contract_abi():
    return STRING_CONTRACT_ABI


@pytest.fixture
def string_contract_kwargs(
    string_contract_bytecode, string_contract_runtime, string_contract_abi
):
    return {
        "bytecode": string_contract_bytecode,
        "bytecode_runtime": string_contract_runtime,
        "abi": string_contract_abi,
    }


@pytest.fixture
def string_contract_instance(w3, string_contract_kwargs):
    return w3.eth.contract(**string_contract_kwargs)


@pytest.fixture
def string_contract(w3, string_contract_instance, address_conversion_func):
    return deploy(
        w3, string_contract_instance, address_conversion_func, args=["Caqalai"]
    )


@pytest.fixture
def non_strict_string_contract(
    w3_non_strict_abi, string_contract_kwargs, address_conversion_func
):
    _non_strict_string_contract = w3_non_strict_abi.eth.contract(
        **string_contract_kwargs
    )
    return deploy(
        w3_non_strict_abi,
        _non_strict_string_contract,
        address_conversion_func,
        args=["Caqalai"],
    )


BYTES_CONTRACT_BYTECODE = "0x60806040526040518060400160405280600281526020017f0123000000000000000000000000000000000000000000000000000000000000815250600090816200004a919062000311565b503480156200005857600080fd5b5060405162000de638038062000de683398181016040528101906200007e91906200055c565b80600190816200008f9190620005b8565b50506200069f565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200011957607f821691505b6020821081036200012f576200012e620000d1565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200015a565b620001a586836200015a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001f2620001ec620001e684620001bd565b620001c7565b620001bd565b9050919050565b6000819050919050565b6200020e83620001d1565b620002266200021d82620001f9565b84845462000167565b825550505050565b600090565b6200023d6200022e565b6200024a81848462000203565b505050565b5b8181101562000272576200026660008262000233565b60018101905062000250565b5050565b601f821115620002c1576200028b8162000135565b62000296846200014a565b81016020851015620002a6578190505b620002be620002b5856200014a565b8301826200024f565b50505b505050565b600082821c905092915050565b6000620002e660001984600802620002c6565b1980831691505092915050565b6000620003018383620002d3565b9150826002028217905092915050565b6200031c8262000097565b67ffffffffffffffff811115620003385762000337620000a2565b5b62000344825462000100565b6200035182828562000276565b600060209050601f83116001811462000389576000841562000374578287015190505b620003808582620002f3565b865550620003f0565b601f198416620003998662000135565b60005b82811015620003c3578489015182556001820191506020850194506020810190506200039c565b86831015620003e35784890151620003df601f891682620002d3565b8355505b6001600288020188555050505b505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620004328262000416565b810181811067ffffffffffffffff82111715620004545762000453620000a2565b5b80604052505050565b600062000469620003f8565b905062000477828262000427565b919050565b600067ffffffffffffffff8211156200049a5762000499620000a2565b5b620004a58262000416565b9050602081019050919050565b60005b83811015620004d2578082015181840152602081019050620004b5565b60008484015250505050565b6000620004f5620004ef846200047c565b6200045d565b90508281526020810184848401111562000514576200051362000411565b5b62000521848285620004b2565b509392505050565b600082601f8301126200054157620005406200040c565b5b815162000553848260208601620004de565b91505092915050565b60006020828403121562000575576200057462000402565b5b600082015167ffffffffffffffff81111562000596576200059562000407565b5b620005a48482850162000529565b91505092915050565b600081519050919050565b620005c382620005ad565b67ffffffffffffffff811115620005df57620005de620000a2565b5b620005eb825462000100565b620005f882828562000276565b600060209050601f8311600181146200063057600084156200061b578287015190505b620006278582620002f3565b86555062000697565b601f198416620006408662000135565b60005b828110156200066a5784890151825560018201915060208501945060208101905062000643565b868310156200068a578489015162000686601f891682620002d3565b8355505b6001600288020188555050505b505050505050565b61073780620006af6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063209652551461004657806330de3cee14610064578063439970aa14610082575b600080fd5b61004e61009e565b60405161005b9190610265565b60405180910390f35b61006c610130565b6040516100799190610265565b60405180910390f35b61009c600480360381019061009791906103d0565b6101c2565b005b6060600180546100ad90610448565b80601f01602080910402602001604051908101604052809291908181526020018280546100d990610448565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b5050505050905090565b60606000805461013f90610448565b80601f016020809104026020016040519081016040528092919081815260200182805461016b90610448565b80156101b85780601f1061018d576101008083540402835291602001916101b8565b820191906000526020600020905b81548152906001019060200180831161019b57829003601f168201915b5050505050905090565b80600190816101d1919061062f565b5050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561020f5780820151818401526020810190506101f4565b60008484015250505050565b6000601f19601f8301169050919050565b6000610237826101d5565b61024181856101e0565b93506102518185602086016101f1565b61025a8161021b565b840191505092915050565b6000602082019050818103600083015261027f818461022c565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102dd8261021b565b810181811067ffffffffffffffff821117156102fc576102fb6102a5565b5b80604052505050565b600061030f610287565b905061031b82826102d4565b919050565b600067ffffffffffffffff82111561033b5761033a6102a5565b5b6103448261021b565b9050602081019050919050565b82818337600083830152505050565b600061037361036e84610320565b610305565b90508281526020810184848401111561038f5761038e6102a0565b5b61039a848285610351565b509392505050565b600082601f8301126103b7576103b661029b565b5b81356103c7848260208601610360565b91505092915050565b6000602082840312156103e6576103e5610291565b5b600082013567ffffffffffffffff81111561040457610403610296565b5b610410848285016103a2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061046057607f821691505b60208210810361047357610472610419565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261049e565b6104e5868361049e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061052c610527610522846104fd565b610507565b6104fd565b9050919050565b6000819050919050565b61054683610511565b61055a61055282610533565b8484546104ab565b825550505050565b600090565b61056f610562565b61057a81848461053d565b505050565b5b8181101561059e57610593600082610567565b600181019050610580565b5050565b601f8211156105e3576105b481610479565b6105bd8461048e565b810160208510156105cc578190505b6105e06105d88561048e565b83018261057f565b50505b505050565b600082821c905092915050565b6000610606600019846008026105e8565b1980831691505092915050565b600061061f83836105f5565b9150826002028217905092915050565b610638826101d5565b67ffffffffffffffff811115610651576106506102a5565b5b61065b8254610448565b6106668282856105a2565b600060209050601f8311600181146106995760008415610687578287015190505b6106918582610613565b8655506106f9565b601f1984166106a786610479565b60005b828110156106cf578489015182556001820191506020850194506020810190506106aa565b868310156106ec57848901516106e8601f8916826105f5565b8355505b6001600288020188555050505b50505050505056fea26469706673582212203089c3295f7cbf7e1f4073f7b19fedf977da326a3f69bd7a15d0e7d097933bc764736f6c63430008110033"  # noqa: E501
BYTES_CONTRACT_RUNTIME = "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063209652551461004657806330de3cee14610064578063439970aa14610082575b600080fd5b61004e61009e565b60405161005b9190610265565b60405180910390f35b61006c610130565b6040516100799190610265565b60405180910390f35b61009c600480360381019061009791906103d0565b6101c2565b005b6060600180546100ad90610448565b80601f01602080910402602001604051908101604052809291908181526020018280546100d990610448565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b5050505050905090565b60606000805461013f90610448565b80601f016020809104026020016040519081016040528092919081815260200182805461016b90610448565b80156101b85780601f1061018d576101008083540402835291602001916101b8565b820191906000526020600020905b81548152906001019060200180831161019b57829003601f168201915b5050505050905090565b80600190816101d1919061062f565b5050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561020f5780820151818401526020810190506101f4565b60008484015250505050565b6000601f19601f8301169050919050565b6000610237826101d5565b61024181856101e0565b93506102518185602086016101f1565b61025a8161021b565b840191505092915050565b6000602082019050818103600083015261027f818461022c565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102dd8261021b565b810181811067ffffffffffffffff821117156102fc576102fb6102a5565b5b80604052505050565b600061030f610287565b905061031b82826102d4565b919050565b600067ffffffffffffffff82111561033b5761033a6102a5565b5b6103448261021b565b9050602081019050919050565b82818337600083830152505050565b600061037361036e84610320565b610305565b90508281526020810184848401111561038f5761038e6102a0565b5b61039a848285610351565b509392505050565b600082601f8301126103b7576103b661029b565b5b81356103c7848260208601610360565b91505092915050565b6000602082840312156103e6576103e5610291565b5b600082013567ffffffffffffffff81111561040457610403610296565b5b610410848285016103a2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061046057607f821691505b60208210810361047357610472610419565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261049e565b6104e5868361049e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061052c610527610522846104fd565b610507565b6104fd565b9050919050565b6000819050919050565b61054683610511565b61055a61055282610533565b8484546104ab565b825550505050565b600090565b61056f610562565b61057a81848461053d565b505050565b5b8181101561059e57610593600082610567565b600181019050610580565b5050565b601f8211156105e3576105b481610479565b6105bd8461048e565b810160208510156105cc578190505b6105e06105d88561048e565b83018261057f565b50505b505050565b600082821c905092915050565b6000610606600019846008026105e8565b1980831691505092915050565b600061061f83836105f5565b9150826002028217905092915050565b610638826101d5565b67ffffffffffffffff811115610651576106506102a5565b5b61065b8254610448565b6106668282856105a2565b600060209050601f8311600181146106995760008415610687578287015190505b6106918582610613565b8655506106f9565b601f1984166106a786610479565b60005b828110156106cf578489015182556001820191506020850194506020810190506106aa565b868310156106ec57848901516106e8601f8916826105f5565b8355505b6001600288020188555050505b50505050505056fea26469706673582212203089c3295f7cbf7e1f4073f7b19fedf977da326a3f69bd7a15d0e7d097933bc764736f6c63430008110033"  # noqa: E501
BYTES_CONTRACT_ABI = json.loads(
    '[{"constant":false,"inputs":[],"name":"getValue","outputs":[{"name":"","type":"bytes"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"constValue","outputs":[{"name":"","type":"bytes"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"value","outputs":[{"name":"","type":"bytes"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"bytes"}],"name":"setValue","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"_value","type":"bytes"}],"payable":false,"type":"constructor"}]'  # noqa: E501
)


@pytest.fixture
def bytes_contract_kwargs():
    return {
        "bytecode": BYTES_CONTRACT_BYTECODE,
        "bytecode_runtime": BYTES_CONTRACT_RUNTIME,
        "abi": BYTES_CONTRACT_ABI,
    }


@pytest.fixture
def bytes_contract(w3, bytes_contract_kwargs):
    return w3.eth.contract(**bytes_contract_kwargs)


@pytest.fixture
def non_strict_bytes_contract(w3_non_strict_abi, bytes_contract_kwargs):
    return w3_non_strict_abi.eth.contract(**bytes_contract_kwargs)


BYTES32_CONTRACT_BYTECODE = "0x60806040527f012301230123012301230123012301230123012301230123012301230123012360005534801561003457600080fd5b5060405161025d38038061025d8339818101604052810190610056919061009e565b80600181905550506100cb565b600080fd5b6000819050919050565b61007b81610068565b811461008657600080fd5b50565b60008151905061009881610072565b92915050565b6000602082840312156100b4576100b3610063565b5b60006100c284828501610089565b91505092915050565b610183806100da6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063209652551461004657806330de3cee1461006457806358825b1014610082575b600080fd5b61004e61009e565b60405161005b91906100d4565b60405180910390f35b61006c6100a8565b60405161007991906100d4565b60405180910390f35b61009c60048036038101906100979190610120565b6100b1565b005b6000600154905090565b60008054905090565b8060018190555050565b6000819050919050565b6100ce816100bb565b82525050565b60006020820190506100e960008301846100c5565b92915050565b600080fd5b6100fd816100bb565b811461010857600080fd5b50565b60008135905061011a816100f4565b92915050565b600060208284031215610136576101356100ef565b5b60006101448482850161010b565b9150509291505056fea2646970667358221220b8267f64119f7a63eb9c2eeae86bf981b7fcbeaa0c0797ff7d7cc51b21cf8d5464736f6c63430008110033"  # noqa: E501
BYTES32_CONTRACT_RUNTIME = "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063209652551461004657806330de3cee1461006457806358825b1014610082575b600080fd5b61004e61009e565b60405161005b91906100d4565b60405180910390f35b61006c6100a8565b60405161007991906100d4565b60405180910390f35b61009c60048036038101906100979190610120565b6100b1565b005b6000600154905090565b60008054905090565b8060018190555050565b6000819050919050565b6100ce816100bb565b82525050565b60006020820190506100e960008301846100c5565b92915050565b600080fd5b6100fd816100bb565b811461010857600080fd5b50565b60008135905061011a816100f4565b92915050565b600060208284031215610136576101356100ef565b5b60006101448482850161010b565b9150509291505056fea2646970667358221220b8267f64119f7a63eb9c2eeae86bf981b7fcbeaa0c0797ff7d7cc51b21cf8d5464736f6c63430008110033"  # noqa: E501
BYTES32_CONTRACT_ABI = json.loads(
    '[{"inputs":[{"internalType":"bytes32","name":"_value","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"constValue","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getValue","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_value","type":"bytes32"}],"name":"setValue","outputs":[],"stateMutability":"nonpayable","type":"function"}]'  # noqa: E501
)


@pytest.fixture
def bytes32_contract_bytecode():
    return BYTES32_CONTRACT_BYTECODE


@pytest.fixture
def bytes32_contract_runtime():
    return BYTES32_CONTRACT_RUNTIME


@pytest.fixture
def bytes32_contract_abi():
    return BYTES32_CONTRACT_ABI


@pytest.fixture
def bytes32_contract_kwargs(
    bytes32_contract_bytecode, bytes32_contract_runtime, bytes32_contract_abi
):
    return {
        "bytecode": bytes32_contract_bytecode,
        "bytecode_runtime": bytes32_contract_runtime,
        "abi": bytes32_contract_abi,
    }


@pytest.fixture
def bytes32_contract(w3, bytes32_contract_kwargs):
    return w3.eth.contract(**bytes32_contract_kwargs)


@pytest.fixture
def emitter_contract_bytecode():
    return EMITTER_CONTRACT_BYTECODE


@pytest.fixture
def emitter_contract_runtime():
    return EMITTER_CONTRACT_RUNTIME


@pytest.fixture
def emitter_contract_abi():
    return EMITTER_CONTRACT_ABI


@pytest.fixture()
def emitter_contract_kwargs(
    emitter_contract_bytecode, emitter_contract_runtime, emitter_contract_abi
):
    return {
        "bytecode": emitter_contract_bytecode,
        "bytecode_runtime": emitter_contract_runtime,
        "abi": emitter_contract_abi,
    }


@pytest.fixture
def non_strict_emitter_contract_instance(w3_non_strict_abi, emitter_contract_kwargs):
    return w3_non_strict_abi.eth.contract(**emitter_contract_kwargs)


@pytest.fixture
def non_strict_emitter(
    w3_non_strict_abi,
    non_strict_emitter_contract_instance,
    wait_for_transaction,
    wait_for_block,
    address_conversion_func,
):
    w3 = w3_non_strict_abi

    wait_for_block(w3)
    deploy_txn_hash = non_strict_emitter_contract_instance.constructor().transact(
        {"gas": 10000000}
    )
    deploy_receipt = wait_for_transaction(w3, deploy_txn_hash)
    contract_address = address_conversion_func(deploy_receipt["contractAddress"])

    bytecode = w3.eth.get_code(contract_address)
    assert bytecode == non_strict_emitter_contract_instance.bytecode_runtime
    emitter_contract = non_strict_emitter_contract_instance(address=contract_address)
    assert emitter_contract.address == contract_address
    return emitter_contract


@pytest.fixture()
def event_contract_kwargs():
    return {
        "bytecode": EVENT_CONTRACT_CODE,
        "bytecode_runtime": EVENT_CONTRACT_RUNTIME,
        "abi": EVENT_CONTRACT_ABI,
    }


@pytest.fixture()
def event_contract_instance(w3_empty, event_contract_kwargs):
    w3 = w3_empty
    return w3.eth.contract(**event_contract_kwargs)


@pytest.fixture()
def event_contract(
    w3_empty,
    event_contract_instance,
    wait_for_transaction,
    wait_for_block,
    address_conversion_func,
):

    w3 = w3_empty

    wait_for_block(w3)
    deploy_txn_hash = event_contract_instance.constructor().transact(
        {"from": w3.eth.coinbase, "gas": 1000000}
    )
    deploy_receipt = wait_for_transaction(w3, deploy_txn_hash)
    contract_address = address_conversion_func(deploy_receipt["contractAddress"])

    bytecode = w3.eth.get_code(contract_address)
    assert bytecode == event_contract_instance.bytecode_runtime
    event_contract = event_contract_instance(address=contract_address)
    assert event_contract.address == contract_address
    return event_contract


@pytest.fixture()
def INDEXED_EVENT_CONTRACT_CODE():
    return IND_EVENT_CONTRACT_CODE


@pytest.fixture()
def INDEXED_EVENT_CONTRACT_RUNTIME():
    return IND_EVENT_CONTRACT_RUNTIME


@pytest.fixture()
def INDEXED_EVENT_CONTRACT_ABI():
    return IND_EVENT_CONTRACT_ABI


@pytest.fixture()
def INDEXED_EVENT_CONTRACT(
    INDEXED_EVENT_CONTRACT_CODE,
    INDEXED_EVENT_CONTRACT_RUNTIME,
    INDEXED_EVENT_CONTRACT_ABI,
):
    return {
        "bytecode": INDEXED_EVENT_CONTRACT_CODE,
        "bytecode_runtime": INDEXED_EVENT_CONTRACT_RUNTIME,
        "abi": INDEXED_EVENT_CONTRACT_ABI,
    }


@pytest.fixture()
def IndexedEventContract(w3_empty, INDEXED_EVENT_CONTRACT):
    w3 = w3_empty
    return w3.eth.contract(**INDEXED_EVENT_CONTRACT)


@pytest.fixture()
def indexed_event(
    w3_empty,
    IndexedEventContract,
    wait_for_transaction,
    wait_for_block,
    address_conversion_func,
):

    w3 = w3_empty

    wait_for_block(w3)
    deploy_txn_hash = IndexedEventContract.constructor().transact(
        {"from": w3.eth.coinbase, "gas": 1000000}
    )
    deploy_receipt = wait_for_transaction(w3, deploy_txn_hash)
    contract_address = address_conversion_func(deploy_receipt["contractAddress"])

    bytecode = w3.eth.get_code(contract_address)
    assert bytecode == IndexedEventContract.bytecode_runtime
    indexed_event_contract = IndexedEventContract(address=contract_address)
    assert indexed_event_contract.address == contract_address
    return indexed_event_contract


CONTRACT_ARRAYS_SOURCE = """
    contract ArraysContract {

        bytes32[] public bytes32Value;
        bytes32[] public bytes32ConstValue;
        byte[] public byteValue;
        byte[] public byteConstValue;

        function ArraysContract(bytes32[] _bytes32Value, byte[] _byteValue) {
            bytes32Value = _bytes32Value;
            byteValue = _byteValue;
            bytes32ConstValue = [keccak256('A'), keccak256('B')];
            byteConstValue = [bytes1(0), bytes1(1)];
        }

        function setBytes32Value(bytes32[] _bytes32Value) {
            bytes32Value = _bytes32Value;
        }

        function getBytes32Value() returns (bytes32[]) {
            return bytes32Value;
        }

        function getBytes32ConstValue() returns (bytes32[]) {
            return bytes32ConstValue;
        }

        function setByteValue(byte[] _byteValue) {
            byteValue = _byteValue;
        }

        function getByteValue() returns (byte[]) {
            return byteValue;
        }

        function getByteConstValue() returns (byte[]) {
            return byteConstValue;
        }
}
"""
CONTRACT_ARRAYS_CODE = "606060405234156200001057600080fd5b60405162000e6238038062000e628339810160405280805182019190602001805182019190505081600090805190602001906200004f92919062000209565b5080600290805190602001906200006892919062000261565b50604080519081016040528060405180807f4100000000000000000000000000000000000000000000000000000000000000815250600101905060405180910390206000191660001916815260200160405180807f420000000000000000000000000000000000000000000000000000000000000081525060010190506040518091039020600019166000191681525060019060026200010a9291906200032f565b50604080519081016040528060007f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160017f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525060039060026200020092919062000387565b505050620004b0565b8280548282559060005260206000209081019282156200024e579160200282015b828111156200024d5782518290600019169055916020019190600101906200022a565b5b5090506200025d919062000455565b5090565b82805482825590600052602060002090601f016020900481019282156200031c5791602002820160005b83821115620002eb57835183826101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009004021790555092602001926001016020816000010492830192600103026200028b565b80156200031a5782816101000a81549060ff0219169055600101602081600001049283019260010302620002eb565b505b5090506200032b91906200047d565b5090565b82805482825590600052602060002090810192821562000374579160200282015b828111156200037357825182906000191690559160200191906001019062000350565b5b50905062000383919062000455565b5090565b82805482825590600052602060002090601f01602090048101928215620004425791602002820160005b838211156200041157835183826101000a81548160ff02191690837f0100000000000000000000000000000000000000000000000000000000000000900402179055509260200192600101602081600001049283019260010302620003b1565b8015620004405782816101000a81549060ff021916905560010160208160000104928301926001030262000411565b505b5090506200045191906200047d565b5090565b6200047a91905b80821115620004765760008160009055506001016200045c565b5090565b90565b620004ad91905b80821115620004a957600081816101000a81549060ff02191690555060010162000484565b5090565b90565b6109a280620004c06000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630afe5e33146100a757806312c9dcc8146101115780631579bf661461018c5780633ddcea2f146101f657806351b4878814610250578063542d83de1461028f578063605ba271146102ce5780638abe51fd14610338578063962e450c146103a2578063bb69679b1461041d575b600080fd5b34156100b257600080fd5b6100ba610477565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156100fd5780820151818401526020810190506100e2565b505050509050019250505060405180910390f35b341561011c57600080fd5b61013260048080359060200190919050506104d9565b60405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561019757600080fd5b61019f61052b565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101e25780820151818401526020810190506101c7565b505050509050019250505060405180910390f35b341561020157600080fd5b61024e6004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506105ed565b005b341561025b57600080fd5b6102716004808035906020019091905050610607565b60405180826000191660001916815260200191505060405180910390f35b341561029a57600080fd5b6102b0600480803590602001909190505061062b565b60405180826000191660001916815260200191505060405180910390f35b34156102d957600080fd5b6102e161064f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610324578082015181840152602081019050610309565b505050509050019250505060405180910390f35b341561034357600080fd5b61034b6106b1565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561038e578082015181840152602081019050610373565b505050509050019250505060405180910390f35b34156103ad57600080fd5b6103c36004808035906020019091905050610773565b60405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561042857600080fd5b6104756004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506107c5565b005b61047f6107df565b60018054806020026020016040519081016040528092919081815260200182805480156104cf57602002820191906000526020600020905b815460001916815260200190600101908083116104b7575b5050505050905090565b6002818154811015156104e857fe5b9060005260206000209060209182820401919006915054906101000a90047f01000000000000000000000000000000000000000000000000000000000000000281565b6105336107f3565b60038054806020026020016040519081016040528092919081815260200182805480156105e357602002820191906000526020600020906000905b82829054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906001019060208260000104928301926001038202915080841161056e5790505b5050505050905090565b8060029080519060200190610603929190610807565b5050565b60018181548110151561061657fe5b90600052602060002090016000915090505481565b60008181548110151561063a57fe5b90600052602060002090016000915090505481565b6106576107df565b60008054806020026020016040519081016040528092919081815260200182805480156106a757602002820191906000526020600020905b8154600019168152602001906001019080831161068f575b5050505050905090565b6106b96107f3565b600280548060200260200160405190810160405280929190818152602001828054801561076957602002820191906000526020600020906000905b82829054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600101906020826000010492830192600103820291508084116106f45790505b5050505050905090565b60038181548110151561078257fe5b9060005260206000209060209182820401919006915054906101000a90047f01000000000000000000000000000000000000000000000000000000000000000281565b80600090805190602001906107db9291906108ce565b5050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b82805482825590600052602060002090601f016020900481019282156108bd5791602002820160005b8382111561088e57835183826101000a81548160ff02191690837f0100000000000000000000000000000000000000000000000000000000000000900402179055509260200192600101602081600001049283019260010302610830565b80156108bb5782816101000a81549060ff021916905560010160208160000104928301926001030261088e565b505b5090506108ca9190610921565b5090565b828054828255906000526020600020908101928215610910579160200282015b8281111561090f5782518290600019169055916020019190600101906108ee565b5b50905061091d9190610951565b5090565b61094e91905b8082111561094a57600081816101000a81549060ff021916905550600101610927565b5090565b90565b61097391905b8082111561096f576000816000905550600101610957565b5090565b905600a165627a7a72305820d0caf89bd0d39b343a907ac9d0f0b9bcddb1b8dc910706160d9d26fdc552afa40029"  # noqa: E501
CONTRACT_ARRAYS_RUNTIME = "0x606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630afe5e33146100a757806312c9dcc8146101115780631579bf661461018c5780633ddcea2f146101f657806351b4878814610250578063542d83de1461028f578063605ba271146102ce5780638abe51fd14610338578063962e450c146103a2578063bb69679b1461041d575b600080fd5b34156100b257600080fd5b6100ba610477565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156100fd5780820151818401526020810190506100e2565b505050509050019250505060405180910390f35b341561011c57600080fd5b61013260048080359060200190919050506104d9565b60405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561019757600080fd5b61019f61052b565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101e25780820151818401526020810190506101c7565b505050509050019250505060405180910390f35b341561020157600080fd5b61024e6004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506105ed565b005b341561025b57600080fd5b6102716004808035906020019091905050610607565b60405180826000191660001916815260200191505060405180910390f35b341561029a57600080fd5b6102b0600480803590602001909190505061062b565b60405180826000191660001916815260200191505060405180910390f35b34156102d957600080fd5b6102e161064f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610324578082015181840152602081019050610309565b505050509050019250505060405180910390f35b341561034357600080fd5b61034b6106b1565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561038e578082015181840152602081019050610373565b505050509050019250505060405180910390f35b34156103ad57600080fd5b6103c36004808035906020019091905050610773565b60405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561042857600080fd5b6104756004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506107c5565b005b61047f6107df565b60018054806020026020016040519081016040528092919081815260200182805480156104cf57602002820191906000526020600020905b815460001916815260200190600101908083116104b7575b5050505050905090565b6002818154811015156104e857fe5b9060005260206000209060209182820401919006915054906101000a90047f01000000000000000000000000000000000000000000000000000000000000000281565b6105336107f3565b60038054806020026020016040519081016040528092919081815260200182805480156105e357602002820191906000526020600020906000905b82829054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906001019060208260000104928301926001038202915080841161056e5790505b5050505050905090565b8060029080519060200190610603929190610807565b5050565b60018181548110151561061657fe5b90600052602060002090016000915090505481565b60008181548110151561063a57fe5b90600052602060002090016000915090505481565b6106576107df565b60008054806020026020016040519081016040528092919081815260200182805480156106a757602002820191906000526020600020905b8154600019168152602001906001019080831161068f575b5050505050905090565b6106b96107f3565b600280548060200260200160405190810160405280929190818152602001828054801561076957602002820191906000526020600020906000905b82829054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600101906020826000010492830192600103820291508084116106f45790505b5050505050905090565b60038181548110151561078257fe5b9060005260206000209060209182820401919006915054906101000a90047f01000000000000000000000000000000000000000000000000000000000000000281565b80600090805190602001906107db9291906108ce565b5050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b82805482825590600052602060002090601f016020900481019282156108bd5791602002820160005b8382111561088e57835183826101000a81548160ff02191690837f0100000000000000000000000000000000000000000000000000000000000000900402179055509260200192600101602081600001049283019260010302610830565b80156108bb5782816101000a81549060ff021916905560010160208160000104928301926001030261088e565b505b5090506108ca9190610921565b5090565b828054828255906000526020600020908101928215610910579160200282015b8281111561090f5782518290600019169055916020019190600101906108ee565b5b50905061091d9190610951565b5090565b61094e91905b8082111561094a57600081816101000a81549060ff021916905550600101610927565b5090565b90565b61097391905b8082111561096f576000816000905550600101610957565b5090565b905600a165627a7a72305820d0caf89bd0d39b343a907ac9d0f0b9bcddb1b8dc910706160d9d26fdc552afa40029"  # noqa: E501
CONTRACT_ARRAYS_ABI = json.loads(
    '[{"constant": false, "inputs": [], "name": "getBytes32ConstValue", "outputs": [{"name": "", "type": "bytes32[]"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "uint256"}], "name": "byteValue", "outputs": [{"name": "", "type": "bytes1"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [], "name": "getByteConstValue", "outputs": [{"name": "", "type": "bytes1[]"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "_byteValue", "type": "bytes1[]"}], "name": "setByteValue", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "uint256"}], "name": "bytes32ConstValue", "outputs": [{"name": "", "type": "bytes32"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "uint256"}], "name": "bytes32Value", "outputs": [{"name": "", "type": "bytes32"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [], "name": "getBytes32Value", "outputs": [{"name": "", "type": "bytes32[]"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [], "name": "getByteValue", "outputs": [{"name": "", "type": "bytes1[]"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "uint256"}], "name": "byteConstValue", "outputs": [{"name": "", "type": "bytes1"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_bytes32Value", "type": "bytes32[]"}], "name": "setBytes32Value", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"name": "_bytes32Value", "type": "bytes32[]"}, {"name": "_byteValue", "type": "bytes1[]"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}]'  # noqa: E501
)


@pytest.fixture()
def ARRAYS_CODE():
    return CONTRACT_ARRAYS_CODE


@pytest.fixture()
def ARRAYS_RUNTIME():
    return CONTRACT_ARRAYS_RUNTIME


@pytest.fixture()
def ARRAYS_ABI():
    return CONTRACT_ARRAYS_ABI


@pytest.fixture()
def ARRAYS_CONTRACT(ARRAYS_CODE, ARRAYS_RUNTIME, ARRAYS_ABI):
    return {
        "bytecode": ARRAYS_CODE,
        "bytecode_runtime": ARRAYS_RUNTIME,
        "abi": ARRAYS_ABI,
    }


@pytest.fixture()
def ArraysContract(w3, ARRAYS_CONTRACT):
    return w3.eth.contract(**ARRAYS_CONTRACT)


@pytest.fixture()
def arrays_contract(w3, ArraysContract, address_conversion_func):
    # bytes_32 = [keccak('0'), keccak('1')]
    bytes32_array = [
        b"\x04HR\xb2\xa6p\xad\xe5@~x\xfb(c\xc5\x1d\xe9\xfc\xb9eB\xa0q\x86\xfe:\xed\xa6\xbb\x8a\x11m",  # noqa: E501
        b"\xc8\x9e\xfd\xaaT\xc0\xf2\x0cz\xdfa(\x82\xdf\tP\xf5\xa9Qc~\x03\x07\xcd\xcbLg/)\x8b\x8b\xc6",  # noqa: E501
    ]
    byte_arr = [b"\xff", b"\xff", b"\xff", b"\xff"]
    return deploy(
        w3, ArraysContract, address_conversion_func, args=[bytes32_array, byte_arr]
    )


@pytest.fixture()
def NonStrictArraysContract(w3_non_strict_abi, ARRAYS_CONTRACT):
    return w3_non_strict_abi.eth.contract(**ARRAYS_CONTRACT)


@pytest.fixture()
def non_strict_arrays_contract(
    w3_non_strict_abi, NonStrictArraysContract, address_conversion_func
):
    # bytes_32 = [keccak('0'), keccak('1')]
    bytes32_array = [
        b"\x04HR\xb2\xa6p\xad\xe5@~x\xfb(c\xc5\x1d\xe9\xfc\xb9eB\xa0q\x86\xfe:\xed\xa6\xbb\x8a\x11m",  # noqa: E501
        b"\xc8\x9e\xfd\xaaT\xc0\xf2\x0cz\xdfa(\x82\xdf\tP\xf5\xa9Qc~\x03\x07\xcd\xcbLg/)\x8b\x8b\xc6",  # noqa: E501
    ]
    byte_arr = [b"\xff", b"\xff", b"\xff", b"\xff"]
    return deploy(
        w3_non_strict_abi,
        NonStrictArraysContract,
        address_conversion_func,
        args=[bytes32_array, byte_arr],
    )


CONTRACT_PAYABLE_TESTER_SOURCE = """
contract PayableTester {
  bool public wasCalled;

  function doNoValueCall() public {
    wasCalled = true;
  }
}
"""
CONTRACT_PAYABLE_TESTER_CODE = "608060405234801561001057600080fd5b5060e88061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c680362214604e578063e4cb8f5c14607a575b600080fd5b348015605957600080fd5b506060608e565b604051808215151515815260200191505060405180910390f35b348015608557600080fd5b50608c60a0565b005b6000809054906101000a900460ff1681565b60016000806101000a81548160ff0219169083151502179055505600a165627a7a723058205362c7376eda918b0dc3a75d0ffab904a241c9b10b68d5268af6ca405242303e0029"  # noqa: E501
CONTRACT_PAYABLE_TESTER_RUNTIME = "6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c680362214604e578063e4cb8f5c14607a575b600080fd5b348015605957600080fd5b506060608e565b604051808215151515815260200191505060405180910390f35b348015608557600080fd5b50608c60a0565b005b6000809054906101000a900460ff1681565b60016000806101000a81548160ff0219169083151502179055505600a165627a7a723058205362c7376eda918b0dc3a75d0ffab904a241c9b10b68d5268af6ca405242303e0029"  # noqa: E501
CONTRACT_PAYABLE_TESTER_ABI = json.loads(
    '[{"constant": true, "inputs": [], "name": "wasCalled", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [], "name": "doNoValueCall", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}]'  # noqa: E501
)


@pytest.fixture()
def PAYABLE_TESTER_CODE():
    return CONTRACT_PAYABLE_TESTER_CODE


@pytest.fixture()
def PAYABLE_TESTER_RUNTIME():
    return CONTRACT_PAYABLE_TESTER_RUNTIME


@pytest.fixture()
def PAYABLE_TESTER_ABI():
    return CONTRACT_PAYABLE_TESTER_ABI


@pytest.fixture()
def PAYABLE_TESTER_CONTRACT(
    PAYABLE_TESTER_CODE, PAYABLE_TESTER_RUNTIME, PAYABLE_TESTER_ABI
):
    return {
        "bytecode": PAYABLE_TESTER_CODE,
        "bytecode_runtime": PAYABLE_TESTER_RUNTIME,
        "abi": PAYABLE_TESTER_ABI,
    }


@pytest.fixture()
def PayableTesterContract(w3, PAYABLE_TESTER_CONTRACT):
    return w3.eth.contract(**PAYABLE_TESTER_CONTRACT)


@pytest.fixture()
def payable_tester_contract(w3, PayableTesterContract, address_conversion_func):
    return deploy(w3, PayableTesterContract, address_conversion_func)


# no matter the function selector, this will return back the 32 bytes of data supplied
CONTRACT_REFLECTION_CODE = "0x610011566020600460003760206000f3005b61000461001103610004600039610004610011036000f3"  # noqa: E501
# reference source used to generate it:
LLL_SOURCE = "['seq', ['return', 0, ['lll', ['seq', ['calldatacopy', 0, 4, 32], ['return', 0, 32], 'stop' ], 0]]])"  # noqa: E501

CONTRACT_FIXED_ABI = [
    {
        "type": "function",
        "constant": False,
        "inputs": [{"type": "fixed8x1"}],
        "name": "reflect",
        "outputs": [{"type": "fixed8x1"}],
    },
    {
        "type": "function",
        "constant": False,
        "inputs": [{"type": "ufixed256x80"}],
        "name": "reflect",
        "outputs": [{"type": "ufixed256x80"}],
    },
    {
        "type": "function",
        "constant": False,
        "inputs": [{"type": "ufixed256x1"}],
        "name": "reflect",
        "outputs": [{"type": "ufixed256x1"}],
    },
    {
        "type": "function",
        "constant": False,
        "inputs": [{"type": "ufixed8x1"}],
        "name": "reflect_short_u",
        "outputs": [{"type": "ufixed8x1"}],
    },
]


@pytest.fixture
def FixedReflectionContract(w3):
    return w3.eth.contract(abi=CONTRACT_FIXED_ABI, bytecode=CONTRACT_REFLECTION_CODE)


@pytest.fixture()
def FALLBACK_FUNCTION_CODE():
    return CONTRACT_FALLBACK_FUNCTION_CODE


@pytest.fixture()
def FALLBACK_FUNCTION_RUNTIME():
    return CONTRACT_FALLBACK_FUNCTION_RUNTIME


@pytest.fixture()
def FALLBACK_FUNCTION_ABI():
    return CONTRACT_FALLBACK_FUNCTION_ABI


@pytest.fixture()
def FALLBACK_FUNCTION_CONTRACT(
    FALLBACK_FUNCTION_CODE, FALLBACK_FUNCTION_RUNTIME, FALLBACK_FUNCTION_ABI
):
    return {
        "bytecode": FALLBACK_FUNCTION_CODE,
        "bytecode_runtime": FALLBACK_FUNCTION_RUNTIME,
        "abi": FALLBACK_FUNCTION_ABI,
    }


@pytest.fixture()
def FallbackFunctionContract(w3, FALLBACK_FUNCTION_CONTRACT):
    return w3.eth.contract(**FALLBACK_FUNCTION_CONTRACT)


@pytest.fixture()
def fallback_function_contract(w3, FallbackFunctionContract, address_conversion_func):
    return deploy(w3, FallbackFunctionContract, address_conversion_func)


@pytest.fixture()
def RECEIVE_FUNCTION_CODE():
    return CONTRACT_RECEIVE_FUNCTION_CODE


@pytest.fixture()
def RECEIVE_FUNCTION_RUNTIME():
    return CONTRACT_RECEIVE_FUNCTION_RUNTIME


@pytest.fixture()
def RECEIVE_FUNCTION_ABI():
    return CONTRACT_RECEIVE_FUNCTION_ABI


@pytest.fixture()
def RECEIVE_FUNCTION_CONTRACT(
    RECEIVE_FUNCTION_CODE, RECEIVE_FUNCTION_RUNTIME, RECEIVE_FUNCTION_ABI
):
    return {
        "bytecode": RECEIVE_FUNCTION_CODE,
        "bytecode_runtime": RECEIVE_FUNCTION_RUNTIME,
        "abi": RECEIVE_FUNCTION_ABI,
    }


@pytest.fixture()
def NO_RECEIVE_FUNCTION_CODE():
    return CONTRACT_NO_RECEIVE_FUNCTION_CODE


@pytest.fixture()
def NO_RECEIVE_FUNCTION_RUNTIME():
    return CONTRACT_NO_RECEIVE_FUNCTION_RUNTIME


@pytest.fixture()
def NO_RECEIVE_FUNCTION_ABI():
    return CONTRACT_NO_RECEIVE_FUNCTION_ABI


@pytest.fixture()
def NO_RECEIVE_FUNCTION_CONTRACT(
    NO_RECEIVE_FUNCTION_CODE, NO_RECEIVE_FUNCTION_RUNTIME, NO_RECEIVE_FUNCTION_ABI
):
    return {
        "bytecode": NO_RECEIVE_FUNCTION_CODE,
        "bytecode_runtime": NO_RECEIVE_FUNCTION_RUNTIME,
        "abi": NO_RECEIVE_FUNCTION_ABI,
    }


@pytest.fixture()
def NoReceiveFunctionContract(w3, NO_RECEIVE_FUNCTION_CONTRACT):
    return w3.eth.contract(**NO_RECEIVE_FUNCTION_CONTRACT)


@pytest.fixture()
def no_receive_function_contract(
    w3, NoReceiveFunctionContract, address_conversion_func
):
    return deploy(w3, NoReceiveFunctionContract, address_conversion_func)


@pytest.fixture()
def ReceiveFunctionContract(w3, RECEIVE_FUNCTION_CONTRACT):
    return w3.eth.contract(**RECEIVE_FUNCTION_CONTRACT)


@pytest.fixture()
def receive_function_contract(w3, ReceiveFunctionContract, address_conversion_func):
    return deploy(w3, ReceiveFunctionContract, address_conversion_func)


CONTRACT_CALLER_TESTER_SOURCE = """
contract CallerTester {
  int public count;

  function add(int256 a, int256 b) public payable returns (int256) {
    return a + b;
  }

  function increment() public returns (int256) {
    return count += 1;
  }

  function counter() public payable returns (int256) {
    return count;
  }

  function returnMeta() public payable returns (address, bytes memory, uint256, uint, uint) {  # noqa: E501
    return (msg.sender, msg.data, gasleft(), msg.value, block.number);
  }
}
"""


CONTRACT_CALLER_TESTER_CODE = "608060405234801561001057600080fd5b50610241806100206000396000f3fe608060405260043610610066577c0100000000000000000000000000000000000000000000000000000000600035046306661abd811461006b57806361bc221a14610092578063a5f3c23b1461009a578063c7fa7d66146100bd578063d09de08a14610185575b600080fd5b34801561007757600080fd5b5061008061019a565b60408051918252519081900360200190f35b6100806101a0565b610080600480360360408110156100b057600080fd5b50803590602001356101a6565b6100c56101aa565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101561014657818101518382015260200161012e565b50505050905090810190601f1680156101735780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561019157600080fd5b50610080610207565b60005481565b60005490565b0190565b600060606000806000336000365a344385955084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250989e929d50949b5092995090975095505050505050565b60008054600101908190559056fea165627a7a72305820ffe1620e420efa326b9c5e4ef9f93cac71cf986196246c7966d71a39259899b10029"  # noqa: E501
CONTRACT_CALLER_TESTER_RUNTIME = "608060405260043610610066577c0100000000000000000000000000000000000000000000000000000000600035046306661abd811461006b57806361bc221a14610092578063a5f3c23b1461009a578063c7fa7d66146100bd578063d09de08a14610185575b600080fd5b34801561007757600080fd5b5061008061019a565b60408051918252519081900360200190f35b6100806101a0565b610080600480360360408110156100b057600080fd5b50803590602001356101a6565b6100c56101aa565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101561014657818101518382015260200161012e565b50505050905090810190601f1680156101735780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561019157600080fd5b50610080610207565b60005481565b60005490565b0190565b600060606000806000336000365a344385955084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250989e929d50949b5092995090975095505050505050565b60008054600101908190559056fea165627a7a72305820ffe1620e420efa326b9c5e4ef9f93cac71cf986196246c7966d71a39259899b10029"  # noqa: E501
CONTRACT_CALLER_TESTER_ABI = json.loads(
    '[ { "constant": true, "inputs": [], "name": "count", "outputs": [ { "name": "", "type": "int256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "counter", "outputs": [ { "name": "", "type": "int256" } ], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [ { "name": "a", "type": "int256" }, { "name": "b", "type": "int256" } ], "name": "add", "outputs": [ { "name": "", "type": "int256" } ], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [], "name": "returnMeta", "outputs": [ { "name": "", "type": "address" }, { "name": "", "type": "bytes" }, { "name": "", "type": "uint256" }, { "name": "", "type": "uint256" }, { "name": "", "type": "uint256" } ], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [], "name": "increment", "outputs": [ { "name": "", "type": "int256" } ], "payable": false, "stateMutability": "nonpayable", "type": "function" } ]'  # noqa: E501
)


@pytest.fixture()
def CALLER_TESTER_CODE():
    return CONTRACT_CALLER_TESTER_CODE


@pytest.fixture()
def CALLER_TESTER_RUNTIME():
    return CONTRACT_CALLER_TESTER_RUNTIME


@pytest.fixture()
def CALLER_TESTER_ABI():
    return CONTRACT_CALLER_TESTER_ABI


@pytest.fixture()
def CALLER_TESTER_CONTRACT(
    CALLER_TESTER_CODE, CALLER_TESTER_RUNTIME, CALLER_TESTER_ABI
):
    return {
        "bytecode": CALLER_TESTER_CODE,
        "bytecode_runtime": CALLER_TESTER_RUNTIME,
        "abi": CALLER_TESTER_ABI,
    }


@pytest.fixture()
def CallerTesterContract(w3, CALLER_TESTER_CONTRACT):
    return w3.eth.contract(**CALLER_TESTER_CONTRACT)


@pytest.fixture()
def REVERT_CONTRACT_CODE():
    return REVERT_CONTRACT_BYTECODE


@pytest.fixture()
def REVERT_CONTRACT_RUNTIME():
    return REVERT_CONTRACT_RUNTIME_CODE


@pytest.fixture()
def REVERT_CONTRACT_ABI():
    return _REVERT_CONTRACT_ABI


@pytest.fixture()
def REVERT_FUNCTION_CONTRACT(
    REVERT_CONTRACT_CODE, REVERT_CONTRACT_RUNTIME, REVERT_CONTRACT_ABI
):
    return {
        "bytecode": REVERT_CONTRACT_CODE,
        "bytecode_runtime": REVERT_CONTRACT_RUNTIME,
        "abi": REVERT_CONTRACT_ABI,
    }


@pytest.fixture()
def RevertContract(w3, REVERT_FUNCTION_CONTRACT):
    return w3.eth.contract(**REVERT_FUNCTION_CONTRACT)


@pytest.fixture()
def revert_contract(w3, RevertContract, address_conversion_func):
    return deploy(w3, RevertContract, address_conversion_func)


class LogFunctions:
    LogAnonymous = 0
    LogNoArguments = 1
    LogSingleArg = 2
    LogDoubleArg = 3
    LogTripleArg = 4
    LogQuadrupleArg = 5
    LogSingleAnonymous = 6
    LogSingleWithIndex = 7
    LogDoubleAnonymous = 8
    LogDoubleWithIndex = 9
    LogTripleWithIndex = 10
    LogQuadrupleWithIndex = 11
    LogBytes = 12


@pytest.fixture()
def emitter_event_ids():
    return LogFunctions


def _encode_to_topic(event_signature):
    return event_signature_to_log_topic(event_signature)


class LogTopics:
    LogAnonymous = _encode_to_topic("LogAnonymous()")
    LogNoArguments = _encode_to_topic("LogNoArguments()")
    LogSingleArg = _encode_to_topic("LogSingleArg(uint256)")
    LogSingleAnonymous = _encode_to_topic("LogSingleAnonymous(uint256)")
    LogSingleWithIndex = _encode_to_topic("LogSingleWithIndex(uint256)")
    LogDoubleArg = _encode_to_topic("LogDoubleArg(uint256,uint256)")
    LogDoubleAnonymous = _encode_to_topic("LogDoubleAnonymous(uint256,uint256)")
    LogDoubleWithIndex = _encode_to_topic("LogDoubleWithIndex(uint256,uint256)")
    LogTripleArg = _encode_to_topic("LogTripleArg(uint256,uint256,uint256)")
    LogTripleWithIndex = _encode_to_topic("LogTripleWithIndex(uint256,uint256,uint256)")
    LogQuadrupleArg = _encode_to_topic(
        "LogQuadrupleArg(uint256,uint256,uint256,uint256)"
    )
    LogQuadrupleWithIndex = _encode_to_topic(
        "LogQuadrupleWithIndex(uint256,uint256,uint256,uint256)",
    )
    LogBytes = _encode_to_topic("LogBytes(bytes)")
    LogString = _encode_to_topic("LogString(string)")
    LogDynamicArgs = _encode_to_topic("LogDynamicArgs(string,string)")
    LogListArgs = _encode_to_topic("LogListArgs(bytes2[],bytes2[])")
    LogAddressIndexed = _encode_to_topic("LogAddressIndexed(address,address)")
    LogAddressNotIndexed = _encode_to_topic("LogAddressNotIndexed(address,address)")
    LogStructArgs = _encode_to_topic("LogStructArgs(uint256,tuple)")


@pytest.fixture()
def emitter_log_topics():
    return LogTopics


@pytest.fixture()
def some_address(address_conversion_func):
    return address_conversion_func("0x5B2063246F2191f18F2675ceDB8b28102e957458")


def invoke_contract(
    api_call_desig="call",
    contract=None,
    contract_function=None,
    func_args=[],
    func_kwargs={},
    tx_params={},
):
    allowable_call_desig = ["call", "transact", "estimate_gas", "build_transaction"]
    if api_call_desig not in allowable_call_desig:
        raise ValueError(
            f"allowable_invoke_method must be one of: {allowable_call_desig}"
        )

    function = contract.functions[contract_function]
    result = getattr(function(*func_args, **func_kwargs), api_call_desig)(tx_params)

    return result


@pytest.fixture
def build_transaction(request):
    return functools.partial(invoke_contract, api_call_desig="build_transaction")


@pytest.fixture
def transact(request):
    return functools.partial(invoke_contract, api_call_desig="transact")


@pytest.fixture
def call(request):
    return functools.partial(invoke_contract, api_call_desig="call")


@pytest.fixture
def estimate_gas(request):
    return functools.partial(invoke_contract, api_call_desig="estimate_gas")


# --- async --- #


@pytest.fixture()
def AsyncNestedTupleContract(async_w3, NESTED_TUPLE_CONTRACT):
    return async_w3.eth.contract(**NESTED_TUPLE_CONTRACT)


@pytest.fixture()
def AsyncTupleContract(async_w3, TUPLE_CONTRACT):
    return async_w3.eth.contract(**TUPLE_CONTRACT)


@pytest.fixture()
def AsyncMathContract(
    async_w3, math_contract_abi, math_contract_bytecode, math_contract_runtime
):
    return async_w3.eth.contract(
        abi=math_contract_abi,
        bytecode=math_contract_bytecode,
        bytecode_runtime=math_contract_runtime,
    )


@pytest_asyncio.fixture()
async def async_math_contract(async_w3, AsyncMathContract, address_conversion_func):
    return await async_deploy(async_w3, AsyncMathContract, address_conversion_func)


@pytest.fixture()
def AsyncSimpleConstructorContract(
    async_w3,
    simple_constructor_contract_bytecode,
    simple_constructor_contract_runtime,
    simple_constructor_contract_abi,
):
    return async_w3.eth.contract(
        abi=simple_constructor_contract_abi,
        bytecode=simple_constructor_contract_bytecode,
        bytecode_runtime=simple_constructor_contract_runtime,
    )


@pytest.fixture()
def AsyncWithConstructorArgumentsContract(
    async_w3,
    contract_with_constructor_args_bytecode,
    contract_with_constructor_args_runtime,
    contract_with_constructor_args_abi,
):
    return async_w3.eth.contract(
        abi=contract_with_constructor_args_abi,
        bytecode=contract_with_constructor_args_bytecode,
        bytecode_runtime=contract_with_constructor_args_runtime,
    )


@pytest.fixture()
def AsyncNonStrictWithConstructorArgumentsContract(
    async_w3_non_strict_abi,
    contract_with_constructor_args_bytecode,
    contract_with_constructor_args_runtime,
    contract_with_constructor_args_abi,
):
    return async_w3_non_strict_abi.eth.contract(
        abi=contract_with_constructor_args_abi,
        bytecode=contract_with_constructor_args_bytecode,
        bytecode_runtime=contract_with_constructor_args_runtime,
    )


@pytest.fixture()
def AsyncWithConstructorAddressArgumentsContract(
    async_w3,
    contract_with_constructor_address_bytecode,
    contract_with_constructor_address_runtime,
    contract_with_constructor_address_abi,
):
    return async_w3.eth.contract(
        abi=contract_with_constructor_address_abi,
        bytecode=contract_with_constructor_address_bytecode,
        bytecode_runtime=contract_with_constructor_address_runtime,
    )


@pytest_asyncio.fixture()
async def async_address_contract(
    async_w3, AsyncWithConstructorAddressArgumentsContract, address_conversion_func
):
    return await async_deploy(
        async_w3,
        AsyncWithConstructorAddressArgumentsContract,
        address_conversion_func,
        args=["0xd3CdA913deB6f67967B99D67aCDFa1712C293601"],
    )


@pytest.fixture()
def AsyncAddressReflectorContract(async_w3):
    return async_w3.eth.contract(
        abi=ADDRESS_REFLECTOR_CONTRACT_ABI,
        bytecode=ADDRESS_REFLECTOR_CONTRACT_BYTECODE,
        bytecode_runtime=ADDRESS_REFLECTOR_CONTRACT_RUNTIME,
    )


@pytest_asyncio.fixture()
async def async_address_reflector_contract(
    async_w3, AsyncAddressReflectorContract, address_conversion_func
):
    return await async_deploy(
        async_w3, AsyncAddressReflectorContract, address_conversion_func
    )


@pytest.fixture()
def AsyncStringContract(async_w3, string_contract_kwargs):
    return async_w3.eth.contract(**string_contract_kwargs)


@pytest_asyncio.fixture()
async def async_string_contract(async_w3, AsyncStringContract, address_conversion_func):
    return await async_deploy(
        async_w3, AsyncStringContract, address_conversion_func, args=["Caqalai"]
    )


@pytest.fixture()
def AsyncBytesContract(async_w3, bytes_contract_kwargs):
    return async_w3.eth.contract(**bytes_contract_kwargs)


@pytest.fixture()
def AsyncNonStrictBytesContract(async_w3_non_strict_abi, bytes_contract_kwargs):
    return async_w3_non_strict_abi.eth.contract(**bytes_contract_kwargs)


@pytest.fixture()
def AsyncBytes32Contract(async_w3, bytes32_contract_kwargs):
    return async_w3.eth.contract(**bytes32_contract_kwargs)


@pytest.fixture()
def AsyncArraysContract(async_w3, ARRAYS_CONTRACT):
    return async_w3.eth.contract(**ARRAYS_CONTRACT)


@pytest_asyncio.fixture()
async def async_arrays_contract(async_w3, AsyncArraysContract, address_conversion_func):
    # bytes_32 = [keccak('0'), keccak('1')]
    bytes32_array = [
        b"\x04HR\xb2\xa6p\xad\xe5@~x\xfb(c\xc5\x1d\xe9\xfc\xb9eB\xa0q\x86\xfe:\xed\xa6\xbb\x8a\x11m",  # noqa: E501
        b"\xc8\x9e\xfd\xaaT\xc0\xf2\x0cz\xdfa(\x82\xdf\tP\xf5\xa9Qc~\x03\x07\xcd\xcbLg/)\x8b\x8b\xc6",  # noqa: E501
    ]
    byte_arr = [b"\xff", b"\xff", b"\xff", b"\xff"]
    return await async_deploy(
        async_w3,
        AsyncArraysContract,
        address_conversion_func,
        args=[bytes32_array, byte_arr],
    )


@pytest.fixture()
def AsyncNonStrictArraysContract(async_w3_non_strict_abi, ARRAYS_CONTRACT):
    return async_w3_non_strict_abi.eth.contract(**ARRAYS_CONTRACT)


@pytest_asyncio.fixture()
async def async_non_strict_arrays_contract(
    async_w3_non_strict_abi, AsyncNonStrictArraysContract, address_conversion_func
):
    # bytes_32 = [keccak('0'), keccak('1')]
    bytes32_array = [
        b"\x04HR\xb2\xa6p\xad\xe5@~x\xfb(c\xc5\x1d\xe9\xfc\xb9eB\xa0q\x86\xfe:\xed\xa6\xbb\x8a\x11m",  # noqa: E501
        b"\xc8\x9e\xfd\xaaT\xc0\xf2\x0cz\xdfa(\x82\xdf\tP\xf5\xa9Qc~\x03\x07\xcd\xcbLg/)\x8b\x8b\xc6",  # noqa: E501
    ]
    byte_arr = [b"\xff", b"\xff", b"\xff", b"\xff"]
    return await async_deploy(
        async_w3_non_strict_abi,
        AsyncNonStrictArraysContract,
        address_conversion_func,
        args=[bytes32_array, byte_arr],
    )


@pytest.fixture()
def AsyncPayableTesterContract(async_w3, PAYABLE_TESTER_CONTRACT):
    return async_w3.eth.contract(**PAYABLE_TESTER_CONTRACT)


@pytest_asyncio.fixture()
async def async_payable_tester_contract(
    async_w3, AsyncPayableTesterContract, address_conversion_func
):
    return await async_deploy(
        async_w3, AsyncPayableTesterContract, address_conversion_func
    )


@pytest.fixture
def AsyncFixedReflectionContract(async_w3):
    return async_w3.eth.contract(
        abi=CONTRACT_FIXED_ABI, bytecode=CONTRACT_REFLECTION_CODE
    )


@pytest.fixture()
def AsyncFallbackFunctionContract(async_w3, FALLBACK_FUNCTION_CONTRACT):
    return async_w3.eth.contract(**FALLBACK_FUNCTION_CONTRACT)


@pytest_asyncio.fixture()
async def async_fallback_function_contract(
    async_w3, AsyncFallbackFunctionContract, address_conversion_func
):
    return await async_deploy(
        async_w3, AsyncFallbackFunctionContract, address_conversion_func
    )


@pytest.fixture()
def AsyncNoReceiveFunctionContract(async_w3, NO_RECEIVE_FUNCTION_CONTRACT):
    return async_w3.eth.contract(**NO_RECEIVE_FUNCTION_CONTRACT)


@pytest_asyncio.fixture()
async def async_no_receive_function_contract(
    async_w3, AsyncNoReceiveFunctionContract, address_conversion_func
):
    return await async_deploy(
        async_w3, AsyncNoReceiveFunctionContract, address_conversion_func
    )


@pytest.fixture()
def AsyncReceiveFunctionContract(async_w3, RECEIVE_FUNCTION_CONTRACT):
    return async_w3.eth.contract(**RECEIVE_FUNCTION_CONTRACT)


@pytest_asyncio.fixture()
async def async_receive_function_contract(
    async_w3, AsyncReceiveFunctionContract, address_conversion_func
):
    return await async_deploy(
        async_w3, AsyncReceiveFunctionContract, address_conversion_func
    )


@pytest.fixture()
def AsyncCallerTesterContract(async_w3, CALLER_TESTER_CONTRACT):
    return async_w3.eth.contract(**CALLER_TESTER_CONTRACT)


@pytest.fixture()
def AsyncRevertContract(async_w3, REVERT_FUNCTION_CONTRACT):
    return async_w3.eth.contract(**REVERT_FUNCTION_CONTRACT)


@pytest_asyncio.fixture()
async def async_revert_contract(async_w3, AsyncRevertContract, address_conversion_func):
    return await async_deploy(async_w3, AsyncRevertContract, address_conversion_func)


async def async_invoke_contract(
    api_call_desig="call",
    contract=None,
    contract_function=None,
    func_args=[],
    func_kwargs={},
    tx_params={},
):
    allowable_call_desig = ["call", "transact", "estimate_gas", "build_transaction"]
    if api_call_desig not in allowable_call_desig:
        raise ValueError(
            f"allowable_invoke_method must be one of: {allowable_call_desig}"
        )

    function = contract.functions[contract_function]
    result = await getattr(function(*func_args, **func_kwargs), api_call_desig)(
        tx_params
    )

    return result


@pytest.fixture()
def async_build_transaction(request):
    return async_partial(async_invoke_contract, api_call_desig="build_transaction")


@pytest.fixture()
def async_transact(request):
    return async_partial(async_invoke_contract, api_call_desig="transact")


@pytest.fixture()
def async_call(request):
    return async_partial(async_invoke_contract, api_call_desig="call")


@pytest.fixture()
def async_estimate_gas(request):
    return async_partial(async_invoke_contract, api_call_desig="estimate_gas")
